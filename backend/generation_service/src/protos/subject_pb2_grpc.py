# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.protos import subject_pb2 as protos_dot_subject__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protos/subject_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SubjectServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSubject = channel.unary_unary(
                '/subject.SubjectService/CreateSubject',
                request_serializer=protos_dot_subject__pb2.CreateSubjectRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.CreateSubjectResponse.FromString,
                _registered_method=True)
        self.GetPublicSubjects = channel.unary_unary(
                '/subject.SubjectService/GetPublicSubjects',
                request_serializer=protos_dot_subject__pb2.GetPublicSubjectsRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetPublicSubjectsResponse.FromString,
                _registered_method=True)
        self.GetPrivateSubjectsByUserId = channel.unary_unary(
                '/subject.SubjectService/GetPrivateSubjectsByUserId',
                request_serializer=protos_dot_subject__pb2.GetPrivateSubjectsByUserIdRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetPrivateSubjectsByUserIdResponse.FromString,
                _registered_method=True)
        self.GetFavouriteSubjectsByUserId = channel.unary_unary(
                '/subject.SubjectService/GetFavouriteSubjectsByUserId',
                request_serializer=protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdResponse.FromString,
                _registered_method=True)
        self.GetSubjectById = channel.unary_unary(
                '/subject.SubjectService/GetSubjectById',
                request_serializer=protos_dot_subject__pb2.GetSubjectByIdRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetSubjectByIdResponse.FromString,
                _registered_method=True)
        self.GetSubjectsByUserId = channel.unary_unary(
                '/subject.SubjectService/GetSubjectsByUserId',
                request_serializer=protos_dot_subject__pb2.GetSubjectsByUserIdRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetSubjectsByUserIdResponse.FromString,
                _registered_method=True)
        self.GetSubjectsByNameSearch = channel.unary_unary(
                '/subject.SubjectService/GetSubjectsByNameSearch',
                request_serializer=protos_dot_subject__pb2.GetSubjectsByNameSearchRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.GetSubjectsByNameSearchResponse.FromString,
                _registered_method=True)
        self.UpdateSubject = channel.unary_unary(
                '/subject.SubjectService/UpdateSubject',
                request_serializer=protos_dot_subject__pb2.UpdateSubjectRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.UpdateSubjectResponse.FromString,
                _registered_method=True)
        self.DeleteSubject = channel.unary_unary(
                '/subject.SubjectService/DeleteSubject',
                request_serializer=protos_dot_subject__pb2.DeleteSubjectRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.DeleteSubjectResponse.FromString,
                _registered_method=True)
        self.SetUserSubjectFavourite = channel.unary_unary(
                '/subject.SubjectService/SetUserSubjectFavourite',
                request_serializer=protos_dot_subject__pb2.SetUserSubjectFavouriteRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.SetUserSubjectFavouriteResponse.FromString,
                _registered_method=True)
        self.SetUserSubjectRole = channel.unary_unary(
                '/subject.SubjectService/SetUserSubjectRole',
                request_serializer=protos_dot_subject__pb2.SetUserSubjectRoleRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.SetUserSubjectRoleResponse.FromString,
                _registered_method=True)
        self.SetSubjectModuleMapping = channel.unary_unary(
                '/subject.SubjectService/SetSubjectModuleMapping',
                request_serializer=protos_dot_subject__pb2.SetSubjectModuleMappingRequest.SerializeToString,
                response_deserializer=protos_dot_subject__pb2.SetSubjectModuleMappingResponse.FromString,
                _registered_method=True)


class SubjectServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSubject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicSubjects(self, request, context):
        """public Subjects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrivateSubjectsByUserId(self, request, context):
        """private Subjects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFavouriteSubjectsByUserId(self, request, context):
        """favourite Subjects that are either public or authorised
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjectById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjectsByUserId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjectsByNameSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserSubjectFavourite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserSubjectRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSubjectModuleMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSubject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubject,
                    request_deserializer=protos_dot_subject__pb2.CreateSubjectRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.CreateSubjectResponse.SerializeToString,
            ),
            'GetPublicSubjects': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicSubjects,
                    request_deserializer=protos_dot_subject__pb2.GetPublicSubjectsRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetPublicSubjectsResponse.SerializeToString,
            ),
            'GetPrivateSubjectsByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrivateSubjectsByUserId,
                    request_deserializer=protos_dot_subject__pb2.GetPrivateSubjectsByUserIdRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetPrivateSubjectsByUserIdResponse.SerializeToString,
            ),
            'GetFavouriteSubjectsByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFavouriteSubjectsByUserId,
                    request_deserializer=protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdResponse.SerializeToString,
            ),
            'GetSubjectById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjectById,
                    request_deserializer=protos_dot_subject__pb2.GetSubjectByIdRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetSubjectByIdResponse.SerializeToString,
            ),
            'GetSubjectsByUserId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjectsByUserId,
                    request_deserializer=protos_dot_subject__pb2.GetSubjectsByUserIdRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetSubjectsByUserIdResponse.SerializeToString,
            ),
            'GetSubjectsByNameSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjectsByNameSearch,
                    request_deserializer=protos_dot_subject__pb2.GetSubjectsByNameSearchRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.GetSubjectsByNameSearchResponse.SerializeToString,
            ),
            'UpdateSubject': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubject,
                    request_deserializer=protos_dot_subject__pb2.UpdateSubjectRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.UpdateSubjectResponse.SerializeToString,
            ),
            'DeleteSubject': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubject,
                    request_deserializer=protos_dot_subject__pb2.DeleteSubjectRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.DeleteSubjectResponse.SerializeToString,
            ),
            'SetUserSubjectFavourite': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserSubjectFavourite,
                    request_deserializer=protos_dot_subject__pb2.SetUserSubjectFavouriteRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.SetUserSubjectFavouriteResponse.SerializeToString,
            ),
            'SetUserSubjectRole': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserSubjectRole,
                    request_deserializer=protos_dot_subject__pb2.SetUserSubjectRoleRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.SetUserSubjectRoleResponse.SerializeToString,
            ),
            'SetSubjectModuleMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSubjectModuleMapping,
                    request_deserializer=protos_dot_subject__pb2.SetSubjectModuleMappingRequest.FromString,
                    response_serializer=protos_dot_subject__pb2.SetSubjectModuleMappingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'subject.SubjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('subject.SubjectService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SubjectService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSubject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/CreateSubject',
            protos_dot_subject__pb2.CreateSubjectRequest.SerializeToString,
            protos_dot_subject__pb2.CreateSubjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPublicSubjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetPublicSubjects',
            protos_dot_subject__pb2.GetPublicSubjectsRequest.SerializeToString,
            protos_dot_subject__pb2.GetPublicSubjectsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrivateSubjectsByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetPrivateSubjectsByUserId',
            protos_dot_subject__pb2.GetPrivateSubjectsByUserIdRequest.SerializeToString,
            protos_dot_subject__pb2.GetPrivateSubjectsByUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFavouriteSubjectsByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetFavouriteSubjectsByUserId',
            protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdRequest.SerializeToString,
            protos_dot_subject__pb2.GetFavouriteSubjectsByUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubjectById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetSubjectById',
            protos_dot_subject__pb2.GetSubjectByIdRequest.SerializeToString,
            protos_dot_subject__pb2.GetSubjectByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubjectsByUserId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetSubjectsByUserId',
            protos_dot_subject__pb2.GetSubjectsByUserIdRequest.SerializeToString,
            protos_dot_subject__pb2.GetSubjectsByUserIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubjectsByNameSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/GetSubjectsByNameSearch',
            protos_dot_subject__pb2.GetSubjectsByNameSearchRequest.SerializeToString,
            protos_dot_subject__pb2.GetSubjectsByNameSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSubject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/UpdateSubject',
            protos_dot_subject__pb2.UpdateSubjectRequest.SerializeToString,
            protos_dot_subject__pb2.UpdateSubjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSubject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/DeleteSubject',
            protos_dot_subject__pb2.DeleteSubjectRequest.SerializeToString,
            protos_dot_subject__pb2.DeleteSubjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetUserSubjectFavourite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/SetUserSubjectFavourite',
            protos_dot_subject__pb2.SetUserSubjectFavouriteRequest.SerializeToString,
            protos_dot_subject__pb2.SetUserSubjectFavouriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetUserSubjectRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/SetUserSubjectRole',
            protos_dot_subject__pb2.SetUserSubjectRoleRequest.SerializeToString,
            protos_dot_subject__pb2.SetUserSubjectRoleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSubjectModuleMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/subject.SubjectService/SetSubjectModuleMapping',
            protos_dot_subject__pb2.SetSubjectModuleMappingRequest.SerializeToString,
            protos_dot_subject__pb2.SetSubjectModuleMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
