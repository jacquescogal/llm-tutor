# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.protos import question_pb2 as protos_dot_question__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protos/question_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class QuestionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateQuestion = channel.unary_unary(
                '/question.QuestionService/CreateQuestion',
                request_serializer=protos_dot_question__pb2.CreateQuestionRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.CreateQuestionResponse.FromString,
                _registered_method=True)
        self.GetQuestionById = channel.unary_unary(
                '/question.QuestionService/GetQuestionById',
                request_serializer=protos_dot_question__pb2.GetQuestionByIdRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.GetQuestionByIdResponse.FromString,
                _registered_method=True)
        self.GetQuestionsByDocId = channel.unary_unary(
                '/question.QuestionService/GetQuestionsByDocId',
                request_serializer=protos_dot_question__pb2.GetQuestionsByDocIdRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.GetQuestionsByDocIdResponse.FromString,
                _registered_method=True)
        self.GetQuestionsByQuestionTitleSearch = channel.unary_unary(
                '/question.QuestionService/GetQuestionsByQuestionTitleSearch',
                request_serializer=protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchResponse.FromString,
                _registered_method=True)
        self.UpdateQuestion = channel.unary_unary(
                '/question.QuestionService/UpdateQuestion',
                request_serializer=protos_dot_question__pb2.UpdateQuestionRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.UpdateQuestionResponse.FromString,
                _registered_method=True)
        self.DeleteQuestion = channel.unary_unary(
                '/question.QuestionService/DeleteQuestion',
                request_serializer=protos_dot_question__pb2.DeleteQuestionRequest.SerializeToString,
                response_deserializer=protos_dot_question__pb2.DeleteQuestionResponse.FromString,
                _registered_method=True)


class QuestionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestionById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestionsByDocId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuestionsByQuestionTitleSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQuestion,
                    request_deserializer=protos_dot_question__pb2.CreateQuestionRequest.FromString,
                    response_serializer=protos_dot_question__pb2.CreateQuestionResponse.SerializeToString,
            ),
            'GetQuestionById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestionById,
                    request_deserializer=protos_dot_question__pb2.GetQuestionByIdRequest.FromString,
                    response_serializer=protos_dot_question__pb2.GetQuestionByIdResponse.SerializeToString,
            ),
            'GetQuestionsByDocId': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestionsByDocId,
                    request_deserializer=protos_dot_question__pb2.GetQuestionsByDocIdRequest.FromString,
                    response_serializer=protos_dot_question__pb2.GetQuestionsByDocIdResponse.SerializeToString,
            ),
            'GetQuestionsByQuestionTitleSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestionsByQuestionTitleSearch,
                    request_deserializer=protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchRequest.FromString,
                    response_serializer=protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchResponse.SerializeToString,
            ),
            'UpdateQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuestion,
                    request_deserializer=protos_dot_question__pb2.UpdateQuestionRequest.FromString,
                    response_serializer=protos_dot_question__pb2.UpdateQuestionResponse.SerializeToString,
            ),
            'DeleteQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQuestion,
                    request_deserializer=protos_dot_question__pb2.DeleteQuestionRequest.FromString,
                    response_serializer=protos_dot_question__pb2.DeleteQuestionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'question.QuestionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('question.QuestionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class QuestionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/CreateQuestion',
            protos_dot_question__pb2.CreateQuestionRequest.SerializeToString,
            protos_dot_question__pb2.CreateQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQuestionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/GetQuestionById',
            protos_dot_question__pb2.GetQuestionByIdRequest.SerializeToString,
            protos_dot_question__pb2.GetQuestionByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQuestionsByDocId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/GetQuestionsByDocId',
            protos_dot_question__pb2.GetQuestionsByDocIdRequest.SerializeToString,
            protos_dot_question__pb2.GetQuestionsByDocIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetQuestionsByQuestionTitleSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/GetQuestionsByQuestionTitleSearch',
            protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchRequest.SerializeToString,
            protos_dot_question__pb2.GetQuestionsByQuestionTitleSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/UpdateQuestion',
            protos_dot_question__pb2.UpdateQuestionRequest.SerializeToString,
            protos_dot_question__pb2.UpdateQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/question.QuestionService/DeleteQuestion',
            protos_dot_question__pb2.DeleteQuestionRequest.SerializeToString,
            protos_dot_question__pb2.DeleteQuestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
