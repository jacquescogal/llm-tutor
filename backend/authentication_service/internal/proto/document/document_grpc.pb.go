// document.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: document.proto

package document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocService_CreateDoc_FullMethodName           = "/document.DocService/CreateDoc"
	DocService_GetDocById_FullMethodName          = "/document.DocService/GetDocById"
	DocService_GetDocsByModuleId_FullMethodName   = "/document.DocService/GetDocsByModuleId"
	DocService_GetDocsByNameSearch_FullMethodName = "/document.DocService/GetDocsByNameSearch"
	DocService_UpdateDoc_FullMethodName           = "/document.DocService/UpdateDoc"
	DocService_DeleteDoc_FullMethodName           = "/document.DocService/DeleteDoc"
	DocService_UpdateSummary_FullMethodName       = "/document.DocService/UpdateSummary"
	DocService_UpdateUploadStatus_FullMethodName  = "/document.DocService/UpdateUploadStatus"
)

// DocServiceClient is the client API for DocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocServiceClient interface {
	CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error)
	GetDocById(ctx context.Context, in *GetDocByIdRequest, opts ...grpc.CallOption) (*GetDocByIdResponse, error)
	GetDocsByModuleId(ctx context.Context, in *GetDocsByModuleIdRequest, opts ...grpc.CallOption) (*GetDocsByModuleIdResponse, error)
	GetDocsByNameSearch(ctx context.Context, in *GetDocsByNameSearchRequest, opts ...grpc.CallOption) (*GetDocsByNameSearchResponse, error)
	UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error)
	DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error)
	UpdateSummary(ctx context.Context, in *UpdateSummaryRequest, opts ...grpc.CallOption) (*UpdateSummaryResponse, error)
	UpdateUploadStatus(ctx context.Context, in *UpdateUploadStatusRequest, opts ...grpc.CallOption) (*UpdateUploadStatusResponse, error)
}

type docServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocServiceClient(cc grpc.ClientConnInterface) DocServiceClient {
	return &docServiceClient{cc}
}

func (c *docServiceClient) CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDocResponse)
	err := c.cc.Invoke(ctx, DocService_CreateDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocById(ctx context.Context, in *GetDocByIdRequest, opts ...grpc.CallOption) (*GetDocByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocByIdResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocsByModuleId(ctx context.Context, in *GetDocsByModuleIdRequest, opts ...grpc.CallOption) (*GetDocsByModuleIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocsByModuleIdResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocsByModuleId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocsByNameSearch(ctx context.Context, in *GetDocsByNameSearchRequest, opts ...grpc.CallOption) (*GetDocsByNameSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocsByNameSearchResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocsByNameSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocResponse)
	err := c.cc.Invoke(ctx, DocService_UpdateDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocResponse)
	err := c.cc.Invoke(ctx, DocService_DeleteDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateSummary(ctx context.Context, in *UpdateSummaryRequest, opts ...grpc.CallOption) (*UpdateSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSummaryResponse)
	err := c.cc.Invoke(ctx, DocService_UpdateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateUploadStatus(ctx context.Context, in *UpdateUploadStatusRequest, opts ...grpc.CallOption) (*UpdateUploadStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUploadStatusResponse)
	err := c.cc.Invoke(ctx, DocService_UpdateUploadStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocServiceServer is the server API for DocService service.
// All implementations must embed UnimplementedDocServiceServer
// for forward compatibility.
type DocServiceServer interface {
	CreateDoc(context.Context, *CreateDocRequest) (*CreateDocResponse, error)
	GetDocById(context.Context, *GetDocByIdRequest) (*GetDocByIdResponse, error)
	GetDocsByModuleId(context.Context, *GetDocsByModuleIdRequest) (*GetDocsByModuleIdResponse, error)
	GetDocsByNameSearch(context.Context, *GetDocsByNameSearchRequest) (*GetDocsByNameSearchResponse, error)
	UpdateDoc(context.Context, *UpdateDocRequest) (*UpdateDocResponse, error)
	DeleteDoc(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error)
	UpdateSummary(context.Context, *UpdateSummaryRequest) (*UpdateSummaryResponse, error)
	UpdateUploadStatus(context.Context, *UpdateUploadStatusRequest) (*UpdateUploadStatusResponse, error)
	mustEmbedUnimplementedDocServiceServer()
}

// UnimplementedDocServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocServiceServer struct{}

func (UnimplementedDocServiceServer) CreateDoc(context.Context, *CreateDocRequest) (*CreateDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoc not implemented")
}
func (UnimplementedDocServiceServer) GetDocById(context.Context, *GetDocByIdRequest) (*GetDocByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocById not implemented")
}
func (UnimplementedDocServiceServer) GetDocsByModuleId(context.Context, *GetDocsByModuleIdRequest) (*GetDocsByModuleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocsByModuleId not implemented")
}
func (UnimplementedDocServiceServer) GetDocsByNameSearch(context.Context, *GetDocsByNameSearchRequest) (*GetDocsByNameSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocsByNameSearch not implemented")
}
func (UnimplementedDocServiceServer) UpdateDoc(context.Context, *UpdateDocRequest) (*UpdateDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoc not implemented")
}
func (UnimplementedDocServiceServer) DeleteDoc(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoc not implemented")
}
func (UnimplementedDocServiceServer) UpdateSummary(context.Context, *UpdateSummaryRequest) (*UpdateSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (UnimplementedDocServiceServer) UpdateUploadStatus(context.Context, *UpdateUploadStatusRequest) (*UpdateUploadStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUploadStatus not implemented")
}
func (UnimplementedDocServiceServer) mustEmbedUnimplementedDocServiceServer() {}
func (UnimplementedDocServiceServer) testEmbeddedByValue()                    {}

// UnsafeDocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocServiceServer will
// result in compilation errors.
type UnsafeDocServiceServer interface {
	mustEmbedUnimplementedDocServiceServer()
}

func RegisterDocServiceServer(s grpc.ServiceRegistrar, srv DocServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocService_ServiceDesc, srv)
}

func _DocService_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_CreateDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).CreateDoc(ctx, req.(*CreateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocById(ctx, req.(*GetDocByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocsByModuleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsByModuleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocsByModuleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocsByModuleId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocsByModuleId(ctx, req.(*GetDocsByModuleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocsByNameSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsByNameSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocsByNameSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocsByNameSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocsByNameSearch(ctx, req.(*GetDocsByNameSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_UpdateDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateDoc(ctx, req.(*UpdateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_DeleteDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).DeleteDoc(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_UpdateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateSummary(ctx, req.(*UpdateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateUploadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUploadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateUploadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_UpdateUploadStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateUploadStatus(ctx, req.(*UpdateUploadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocService_ServiceDesc is the grpc.ServiceDesc for DocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document.DocService",
	HandlerType: (*DocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoc",
			Handler:    _DocService_CreateDoc_Handler,
		},
		{
			MethodName: "GetDocById",
			Handler:    _DocService_GetDocById_Handler,
		},
		{
			MethodName: "GetDocsByModuleId",
			Handler:    _DocService_GetDocsByModuleId_Handler,
		},
		{
			MethodName: "GetDocsByNameSearch",
			Handler:    _DocService_GetDocsByNameSearch_Handler,
		},
		{
			MethodName: "UpdateDoc",
			Handler:    _DocService_UpdateDoc_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _DocService_DeleteDoc_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _DocService_UpdateSummary_Handler,
		},
		{
			MethodName: "UpdateUploadStatus",
			Handler:    _DocService_UpdateUploadStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document.proto",
}
