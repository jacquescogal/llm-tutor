// question.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.1
// source: question.proto

package question

import (
	common "bff/internal/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QuestionService
type CreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint64              `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId         uint64              `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionTitle string              `protobuf:"bytes,3,opt,name=question_title,json=questionTitle,proto3" json:"question_title,omitempty"`
	QuestionBlob  []byte              `protobuf:"bytes,4,opt,name=question_blob,json=questionBlob,proto3" json:"question_blob,omitempty"`
	QuestionType  common.QuestionType `protobuf:"varint,5,opt,name=question_type,json=questionType,proto3,enum=common.QuestionType" json:"question_type,omitempty"`
	ModuleId      uint64              `protobuf:"varint,6,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	mi := &file_question_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{0}
}

func (x *CreateQuestionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateQuestionRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *CreateQuestionRequest) GetQuestionTitle() string {
	if x != nil {
		return x.QuestionTitle
	}
	return ""
}

func (x *CreateQuestionRequest) GetQuestionBlob() []byte {
	if x != nil {
		return x.QuestionBlob
	}
	return nil
}

func (x *CreateQuestionRequest) GetQuestionType() common.QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return common.QuestionType(0)
}

func (x *CreateQuestionRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type CreateQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateQuestionResponse) Reset() {
	*x = CreateQuestionResponse{}
	mi := &file_question_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionResponse) ProtoMessage() {}

func (x *CreateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionResponse.ProtoReflect.Descriptor instead.
func (*CreateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{1}
}

type GetQuestionByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId      uint64 `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionId uint64 `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	ModuleId   uint64 `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *GetQuestionByIdRequest) Reset() {
	*x = GetQuestionByIdRequest{}
	mi := &file_question_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionByIdRequest) ProtoMessage() {}

func (x *GetQuestionByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionByIdRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionByIdRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{2}
}

func (x *GetQuestionByIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetQuestionByIdRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *GetQuestionByIdRequest) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *GetQuestionByIdRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type GetQuestionByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question *DBQuestion `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
}

func (x *GetQuestionByIdResponse) Reset() {
	*x = GetQuestionByIdResponse{}
	mi := &file_question_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionByIdResponse) ProtoMessage() {}

func (x *GetQuestionByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionByIdResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionByIdResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{3}
}

func (x *GetQuestionByIdResponse) GetQuestion() *DBQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

type GetQuestionsByDocIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId            uint64                    `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,5,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,6,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
	ModuleId         uint64                    `protobuf:"varint,7,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *GetQuestionsByDocIdRequest) Reset() {
	*x = GetQuestionsByDocIdRequest{}
	mi := &file_question_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByDocIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByDocIdRequest) ProtoMessage() {}

func (x *GetQuestionsByDocIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByDocIdRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsByDocIdRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{4}
}

func (x *GetQuestionsByDocIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetQuestionsByDocIdRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *GetQuestionsByDocIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetQuestionsByDocIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetQuestionsByDocIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetQuestionsByDocIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

func (x *GetQuestionsByDocIdRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type GetQuestionsByDocIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*DBQuestion `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetQuestionsByDocIdResponse) Reset() {
	*x = GetQuestionsByDocIdResponse{}
	mi := &file_question_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByDocIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByDocIdResponse) ProtoMessage() {}

func (x *GetQuestionsByDocIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByDocIdResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsByDocIdResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{5}
}

func (x *GetQuestionsByDocIdResponse) GetQuestions() []*DBQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetQuestionsByQuestionTitleSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId            uint64                    `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	SearchQuery      string                    `protobuf:"bytes,3,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,4,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,6,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,7,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
	ModuleId         uint64                    `protobuf:"varint,8,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *GetQuestionsByQuestionTitleSearchRequest) Reset() {
	*x = GetQuestionsByQuestionTitleSearchRequest{}
	mi := &file_question_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByQuestionTitleSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByQuestionTitleSearchRequest) ProtoMessage() {}

func (x *GetQuestionsByQuestionTitleSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByQuestionTitleSearchRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsByQuestionTitleSearchRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{6}
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

func (x *GetQuestionsByQuestionTitleSearchRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type GetQuestionsByQuestionTitleSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []*DBQuestion `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetQuestionsByQuestionTitleSearchResponse) Reset() {
	*x = GetQuestionsByQuestionTitleSearchResponse{}
	mi := &file_question_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsByQuestionTitleSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsByQuestionTitleSearchResponse) ProtoMessage() {}

func (x *GetQuestionsByQuestionTitleSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsByQuestionTitleSearchResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsByQuestionTitleSearchResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuestionsByQuestionTitleSearchResponse) GetQuestions() []*DBQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type UpdateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint64              `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId         uint64              `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionId    uint64              `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	QuestionTitle string              `protobuf:"bytes,4,opt,name=question_title,json=questionTitle,proto3" json:"question_title,omitempty"`
	QuestionBlob  []byte              `protobuf:"bytes,5,opt,name=question_blob,json=questionBlob,proto3" json:"question_blob,omitempty"`
	QuestionType  common.QuestionType `protobuf:"varint,6,opt,name=question_type,json=questionType,proto3,enum=common.QuestionType" json:"question_type,omitempty"`
	ModuleId      uint64              `protobuf:"varint,7,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	mi := &file_question_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQuestionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateQuestionRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *UpdateQuestionRequest) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *UpdateQuestionRequest) GetQuestionTitle() string {
	if x != nil {
		return x.QuestionTitle
	}
	return ""
}

func (x *UpdateQuestionRequest) GetQuestionBlob() []byte {
	if x != nil {
		return x.QuestionBlob
	}
	return nil
}

func (x *UpdateQuestionRequest) GetQuestionType() common.QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return common.QuestionType(0)
}

func (x *UpdateQuestionRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type UpdateQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateQuestionResponse) Reset() {
	*x = UpdateQuestionResponse{}
	mi := &file_question_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionResponse) ProtoMessage() {}

func (x *UpdateQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionResponse.ProtoReflect.Descriptor instead.
func (*UpdateQuestionResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{9}
}

type DeleteQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId      uint64 `protobuf:"varint,2,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionId uint64 `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	ModuleId   uint64 `protobuf:"varint,4,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	mi := &file_question_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteQuestionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteQuestionRequest) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *DeleteQuestionRequest) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *DeleteQuestionRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type DeleteQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteQuestionResponse) Reset() {
	*x = DeleteQuestionResponse{}
	mi := &file_question_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionResponse) ProtoMessage() {}

func (x *DeleteQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuestionResponse) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{11}
}

type DBQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId    uint64              `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	UserId        uint64              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId         uint64              `protobuf:"varint,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionTitle string              `protobuf:"bytes,4,opt,name=question_title,json=questionTitle,proto3" json:"question_title,omitempty"`
	QuestionBlob  []byte              `protobuf:"bytes,5,opt,name=question_blob,json=questionBlob,proto3" json:"question_blob,omitempty"` // refer to MCQQuestion or TextInputQuestion
	QuestionType  common.QuestionType `protobuf:"varint,6,opt,name=question_type,json=questionType,proto3,enum=common.QuestionType" json:"question_type,omitempty"`
	CreatedTime   uint64              `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime   uint64              `protobuf:"varint,8,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *DBQuestion) Reset() {
	*x = DBQuestion{}
	mi := &file_question_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBQuestion) ProtoMessage() {}

func (x *DBQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBQuestion.ProtoReflect.Descriptor instead.
func (*DBQuestion) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{12}
}

func (x *DBQuestion) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *DBQuestion) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DBQuestion) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *DBQuestion) GetQuestionTitle() string {
	if x != nil {
		return x.QuestionTitle
	}
	return ""
}

func (x *DBQuestion) GetQuestionBlob() []byte {
	if x != nil {
		return x.QuestionBlob
	}
	return nil
}

func (x *DBQuestion) GetQuestionType() common.QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return common.QuestionType(0)
}

func (x *DBQuestion) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DBQuestion) GetUpdatedTime() uint64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type MCQQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choices []*MCQChoice `protobuf:"bytes,1,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *MCQQuestion) Reset() {
	*x = MCQQuestion{}
	mi := &file_question_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCQQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCQQuestion) ProtoMessage() {}

func (x *MCQQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCQQuestion.ProtoReflect.Descriptor instead.
func (*MCQQuestion) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{13}
}

func (x *MCQQuestion) GetChoices() []*MCQChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

type MCQChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Choice    string `protobuf:"bytes,1,opt,name=choice,proto3" json:"choice,omitempty"`
	IsCorrect bool   `protobuf:"varint,2,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
}

func (x *MCQChoice) Reset() {
	*x = MCQChoice{}
	mi := &file_question_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCQChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCQChoice) ProtoMessage() {}

func (x *MCQChoice) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCQChoice.ProtoReflect.Descriptor instead.
func (*MCQChoice) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{14}
}

func (x *MCQChoice) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *MCQChoice) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

type TextInputQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *TextInputQuestion) Reset() {
	*x = TextInputQuestion{}
	mi := &file_question_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextInputQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInputQuestion) ProtoMessage() {}

func (x *TextInputQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInputQuestion.ProtoReflect.Descriptor instead.
func (*TextInputQuestion) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{15}
}

func (x *TextInputQuestion) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

type QuestionReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId         uint64              `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	UserId             uint64              `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DocId              uint64              `protobuf:"varint,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	QuestionTitle      string              `protobuf:"bytes,4,opt,name=question_title,json=questionTitle,proto3" json:"question_title,omitempty"`
	QuestionSerialized string              `protobuf:"bytes,5,opt,name=question_serialized,json=questionSerialized,proto3" json:"question_serialized,omitempty"`
	QuestionType       common.QuestionType `protobuf:"varint,6,opt,name=question_type,json=questionType,proto3,enum=common.QuestionType" json:"question_type,omitempty"`
	CreatedTime        uint64              `protobuf:"varint,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime        uint64              `protobuf:"varint,8,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *QuestionReturn) Reset() {
	*x = QuestionReturn{}
	mi := &file_question_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionReturn) ProtoMessage() {}

func (x *QuestionReturn) ProtoReflect() protoreflect.Message {
	mi := &file_question_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionReturn.ProtoReflect.Descriptor instead.
func (*QuestionReturn) Descriptor() ([]byte, []int) {
	return file_question_proto_rawDescGZIP(), []int{16}
}

func (x *QuestionReturn) GetQuestionId() uint64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *QuestionReturn) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *QuestionReturn) GetDocId() uint64 {
	if x != nil {
		return x.DocId
	}
	return 0
}

func (x *QuestionReturn) GetQuestionTitle() string {
	if x != nil {
		return x.QuestionTitle
	}
	return ""
}

func (x *QuestionReturn) GetQuestionSerialized() string {
	if x != nil {
		return x.QuestionSerialized
	}
	return ""
}

func (x *QuestionReturn) GetQuestionType() common.QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return common.QuestionType(0)
}

func (x *QuestionReturn) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *QuestionReturn) GetUpdatedTime() uint64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

var File_question_proto protoreflect.FileDescriptor

var file_question_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x39,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x28,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5f,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x42, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x8c, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x44,
	0x42, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x4d, 0x43, 0x51, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x43, 0x51, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x42, 0x0a, 0x09, 0x4d, 0x43, 0x51, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0x2b, 0x0a, 0x11, 0x54, 0x65, 0x78,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xba, 0x02, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x32, 0xdb, 0x04, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x32,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1d, 0x5a, 0x1b, 0x62, 0x66, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_question_proto_rawDescOnce sync.Once
	file_question_proto_rawDescData = file_question_proto_rawDesc
)

func file_question_proto_rawDescGZIP() []byte {
	file_question_proto_rawDescOnce.Do(func() {
		file_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_question_proto_rawDescData)
	})
	return file_question_proto_rawDescData
}

var file_question_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_question_proto_goTypes = []any{
	(*CreateQuestionRequest)(nil),                     // 0: question.CreateQuestionRequest
	(*CreateQuestionResponse)(nil),                    // 1: question.CreateQuestionResponse
	(*GetQuestionByIdRequest)(nil),                    // 2: question.GetQuestionByIdRequest
	(*GetQuestionByIdResponse)(nil),                   // 3: question.GetQuestionByIdResponse
	(*GetQuestionsByDocIdRequest)(nil),                // 4: question.GetQuestionsByDocIdRequest
	(*GetQuestionsByDocIdResponse)(nil),               // 5: question.GetQuestionsByDocIdResponse
	(*GetQuestionsByQuestionTitleSearchRequest)(nil),  // 6: question.GetQuestionsByQuestionTitleSearchRequest
	(*GetQuestionsByQuestionTitleSearchResponse)(nil), // 7: question.GetQuestionsByQuestionTitleSearchResponse
	(*UpdateQuestionRequest)(nil),                     // 8: question.UpdateQuestionRequest
	(*UpdateQuestionResponse)(nil),                    // 9: question.UpdateQuestionResponse
	(*DeleteQuestionRequest)(nil),                     // 10: question.DeleteQuestionRequest
	(*DeleteQuestionResponse)(nil),                    // 11: question.DeleteQuestionResponse
	(*DBQuestion)(nil),                                // 12: question.DBQuestion
	(*MCQQuestion)(nil),                               // 13: question.MCQQuestion
	(*MCQChoice)(nil),                                 // 14: question.MCQChoice
	(*TextInputQuestion)(nil),                         // 15: question.TextInputQuestion
	(*QuestionReturn)(nil),                            // 16: question.QuestionReturn
	(common.QuestionType)(0),                          // 17: common.QuestionType
	(common.ORDER_BY_FIELD)(0),                        // 18: common.ORDER_BY_FIELD
	(common.ORDER_BY_DIRECTION)(0),                    // 19: common.ORDER_BY_DIRECTION
}
var file_question_proto_depIdxs = []int32{
	17, // 0: question.CreateQuestionRequest.question_type:type_name -> common.QuestionType
	12, // 1: question.GetQuestionByIdResponse.question:type_name -> question.DBQuestion
	18, // 2: question.GetQuestionsByDocIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	19, // 3: question.GetQuestionsByDocIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	12, // 4: question.GetQuestionsByDocIdResponse.questions:type_name -> question.DBQuestion
	18, // 5: question.GetQuestionsByQuestionTitleSearchRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	19, // 6: question.GetQuestionsByQuestionTitleSearchRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	12, // 7: question.GetQuestionsByQuestionTitleSearchResponse.questions:type_name -> question.DBQuestion
	17, // 8: question.UpdateQuestionRequest.question_type:type_name -> common.QuestionType
	17, // 9: question.DBQuestion.question_type:type_name -> common.QuestionType
	14, // 10: question.MCQQuestion.choices:type_name -> question.MCQChoice
	17, // 11: question.QuestionReturn.question_type:type_name -> common.QuestionType
	0,  // 12: question.QuestionService.CreateQuestion:input_type -> question.CreateQuestionRequest
	2,  // 13: question.QuestionService.GetQuestionById:input_type -> question.GetQuestionByIdRequest
	4,  // 14: question.QuestionService.GetQuestionsByDocId:input_type -> question.GetQuestionsByDocIdRequest
	6,  // 15: question.QuestionService.GetQuestionsByQuestionTitleSearch:input_type -> question.GetQuestionsByQuestionTitleSearchRequest
	8,  // 16: question.QuestionService.UpdateQuestion:input_type -> question.UpdateQuestionRequest
	10, // 17: question.QuestionService.DeleteQuestion:input_type -> question.DeleteQuestionRequest
	1,  // 18: question.QuestionService.CreateQuestion:output_type -> question.CreateQuestionResponse
	3,  // 19: question.QuestionService.GetQuestionById:output_type -> question.GetQuestionByIdResponse
	5,  // 20: question.QuestionService.GetQuestionsByDocId:output_type -> question.GetQuestionsByDocIdResponse
	7,  // 21: question.QuestionService.GetQuestionsByQuestionTitleSearch:output_type -> question.GetQuestionsByQuestionTitleSearchResponse
	9,  // 22: question.QuestionService.UpdateQuestion:output_type -> question.UpdateQuestionResponse
	11, // 23: question.QuestionService.DeleteQuestion:output_type -> question.DeleteQuestionResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_question_proto_init() }
func file_question_proto_init() {
	if File_question_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_question_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_question_proto_goTypes,
		DependencyIndexes: file_question_proto_depIdxs,
		MessageInfos:      file_question_proto_msgTypes,
	}.Build()
	File_question_proto = out.File
	file_question_proto_rawDesc = nil
	file_question_proto_goTypes = nil
	file_question_proto_depIdxs = nil
}
