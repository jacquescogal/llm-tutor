// memory.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: memory.proto

package memory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemoryService_CreateMemory_FullMethodName                   = "/memory.MemoryService/CreateMemory"
	MemoryService_GetMemoryById_FullMethodName                  = "/memory.MemoryService/GetMemoryById"
	MemoryService_GetMemoriesByDocId_FullMethodName             = "/memory.MemoryService/GetMemoriesByDocId"
	MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName = "/memory.MemoryService/GetMemoriesByMemoryTitleSearch"
	MemoryService_UpdateMemory_FullMethodName                   = "/memory.MemoryService/UpdateMemory"
	MemoryService_DeleteMemory_FullMethodName                   = "/memory.MemoryService/DeleteMemory"
)

// MemoryServiceClient is the client API for MemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryServiceClient interface {
	CreateMemory(ctx context.Context, in *CreateMemoryRequest, opts ...grpc.CallOption) (*CreateMemoryResponse, error)
	GetMemoryById(ctx context.Context, in *GetMemoryByIdRequest, opts ...grpc.CallOption) (*GetMemoryByIdResponse, error)
	GetMemoriesByDocId(ctx context.Context, in *GetMemoriesByDocIdRequest, opts ...grpc.CallOption) (*GetMemoriesByDocIdResponse, error)
	GetMemoriesByMemoryTitleSearch(ctx context.Context, in *GetMemoriesByMemoryTitleSearchRequest, opts ...grpc.CallOption) (*GetMemoriesByMemoryTitleSearchResponse, error)
	UpdateMemory(ctx context.Context, in *UpdateMemoryRequest, opts ...grpc.CallOption) (*UpdateMemoryResponse, error)
	DeleteMemory(ctx context.Context, in *DeleteMemoryRequest, opts ...grpc.CallOption) (*DeleteMemoryResponse, error)
}

type memoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryServiceClient(cc grpc.ClientConnInterface) MemoryServiceClient {
	return &memoryServiceClient{cc}
}

func (c *memoryServiceClient) CreateMemory(ctx context.Context, in *CreateMemoryRequest, opts ...grpc.CallOption) (*CreateMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_CreateMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoryById(ctx context.Context, in *GetMemoryByIdRequest, opts ...grpc.CallOption) (*GetMemoryByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoryByIdResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoriesByDocId(ctx context.Context, in *GetMemoriesByDocIdRequest, opts ...grpc.CallOption) (*GetMemoriesByDocIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoriesByDocIdResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoriesByDocId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoriesByMemoryTitleSearch(ctx context.Context, in *GetMemoriesByMemoryTitleSearchRequest, opts ...grpc.CallOption) (*GetMemoriesByMemoryTitleSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoriesByMemoryTitleSearchResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) UpdateMemory(ctx context.Context, in *UpdateMemoryRequest, opts ...grpc.CallOption) (*UpdateMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_UpdateMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) DeleteMemory(ctx context.Context, in *DeleteMemoryRequest, opts ...grpc.CallOption) (*DeleteMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_DeleteMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServiceServer is the server API for MemoryService service.
// All implementations must embed UnimplementedMemoryServiceServer
// for forward compatibility.
type MemoryServiceServer interface {
	CreateMemory(context.Context, *CreateMemoryRequest) (*CreateMemoryResponse, error)
	GetMemoryById(context.Context, *GetMemoryByIdRequest) (*GetMemoryByIdResponse, error)
	GetMemoriesByDocId(context.Context, *GetMemoriesByDocIdRequest) (*GetMemoriesByDocIdResponse, error)
	GetMemoriesByMemoryTitleSearch(context.Context, *GetMemoriesByMemoryTitleSearchRequest) (*GetMemoriesByMemoryTitleSearchResponse, error)
	UpdateMemory(context.Context, *UpdateMemoryRequest) (*UpdateMemoryResponse, error)
	DeleteMemory(context.Context, *DeleteMemoryRequest) (*DeleteMemoryResponse, error)
	mustEmbedUnimplementedMemoryServiceServer()
}

// UnimplementedMemoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemoryServiceServer struct{}

func (UnimplementedMemoryServiceServer) CreateMemory(context.Context, *CreateMemoryRequest) (*CreateMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemory not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoryById(context.Context, *GetMemoryByIdRequest) (*GetMemoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryById not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoriesByDocId(context.Context, *GetMemoriesByDocIdRequest) (*GetMemoriesByDocIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoriesByDocId not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoriesByMemoryTitleSearch(context.Context, *GetMemoriesByMemoryTitleSearchRequest) (*GetMemoriesByMemoryTitleSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoriesByMemoryTitleSearch not implemented")
}
func (UnimplementedMemoryServiceServer) UpdateMemory(context.Context, *UpdateMemoryRequest) (*UpdateMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemory not implemented")
}
func (UnimplementedMemoryServiceServer) DeleteMemory(context.Context, *DeleteMemoryRequest) (*DeleteMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemory not implemented")
}
func (UnimplementedMemoryServiceServer) mustEmbedUnimplementedMemoryServiceServer() {}
func (UnimplementedMemoryServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServiceServer will
// result in compilation errors.
type UnsafeMemoryServiceServer interface {
	mustEmbedUnimplementedMemoryServiceServer()
}

func RegisterMemoryServiceServer(s grpc.ServiceRegistrar, srv MemoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemoryService_ServiceDesc, srv)
}

func _MemoryService_CreateMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).CreateMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_CreateMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).CreateMemory(ctx, req.(*CreateMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoryById(ctx, req.(*GetMemoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoriesByDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoriesByDocIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoriesByDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoriesByDocId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoriesByDocId(ctx, req.(*GetMemoriesByDocIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoriesByMemoryTitleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoriesByMemoryTitleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoriesByMemoryTitleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoriesByMemoryTitleSearch(ctx, req.(*GetMemoriesByMemoryTitleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_UpdateMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).UpdateMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_UpdateMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).UpdateMemory(ctx, req.(*UpdateMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_DeleteMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).DeleteMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_DeleteMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).DeleteMemory(ctx, req.(*DeleteMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryService_ServiceDesc is the grpc.ServiceDesc for MemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memory.MemoryService",
	HandlerType: (*MemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMemory",
			Handler:    _MemoryService_CreateMemory_Handler,
		},
		{
			MethodName: "GetMemoryById",
			Handler:    _MemoryService_GetMemoryById_Handler,
		},
		{
			MethodName: "GetMemoriesByDocId",
			Handler:    _MemoryService_GetMemoriesByDocId_Handler,
		},
		{
			MethodName: "GetMemoriesByMemoryTitleSearch",
			Handler:    _MemoryService_GetMemoriesByMemoryTitleSearch_Handler,
		},
		{
			MethodName: "UpdateMemory",
			Handler:    _MemoryService_UpdateMemory_Handler,
		},
		{
			MethodName: "DeleteMemory",
			Handler:    _MemoryService_DeleteMemory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memory.proto",
}
