// subject.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.1
// source: subject.proto

package subject

import (
	common "bff/internal/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SubjectService
type CreateSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // This is the user_id of the user who is creating the subject
	SubjectName        string `protobuf:"bytes,2,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	SubjectDescription string `protobuf:"bytes,3,opt,name=subject_description,json=subjectDescription,proto3" json:"subject_description,omitempty"`
	IsPublic           bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *CreateSubjectRequest) Reset() {
	*x = CreateSubjectRequest{}
	mi := &file_subject_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectRequest) ProtoMessage() {}

func (x *CreateSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectRequest.ProtoReflect.Descriptor instead.
func (*CreateSubjectRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSubjectRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateSubjectRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *CreateSubjectRequest) GetSubjectDescription() string {
	if x != nil {
		return x.SubjectDescription
	}
	return ""
}

func (x *CreateSubjectRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type CreateSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateSubjectResponse) Reset() {
	*x = CreateSubjectResponse{}
	mi := &file_subject_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubjectResponse) ProtoMessage() {}

func (x *CreateSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubjectResponse.ProtoReflect.Descriptor instead.
func (*CreateSubjectResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{1}
}

type GetPublicSubjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetPublicSubjectsRequest) Reset() {
	*x = GetPublicSubjectsRequest{}
	mi := &file_subject_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicSubjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicSubjectsRequest) ProtoMessage() {}

func (x *GetPublicSubjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicSubjectsRequest.ProtoReflect.Descriptor instead.
func (*GetPublicSubjectsRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{2}
}

func (x *GetPublicSubjectsRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPublicSubjectsRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPublicSubjectsRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPublicSubjectsRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetPublicSubjectsRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetPublicSubjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*FullSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *GetPublicSubjectsResponse) Reset() {
	*x = GetPublicSubjectsResponse{}
	mi := &file_subject_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicSubjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicSubjectsResponse) ProtoMessage() {}

func (x *GetPublicSubjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicSubjectsResponse.ProtoReflect.Descriptor instead.
func (*GetPublicSubjectsResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{3}
}

func (x *GetPublicSubjectsResponse) GetSubjects() []*FullSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type GetPrivateSubjectsByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetPrivateSubjectsByUserIdRequest) Reset() {
	*x = GetPrivateSubjectsByUserIdRequest{}
	mi := &file_subject_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateSubjectsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateSubjectsByUserIdRequest) ProtoMessage() {}

func (x *GetPrivateSubjectsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateSubjectsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateSubjectsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{4}
}

func (x *GetPrivateSubjectsByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPrivateSubjectsByUserIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPrivateSubjectsByUserIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPrivateSubjectsByUserIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetPrivateSubjectsByUserIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetPrivateSubjectsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*FullSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *GetPrivateSubjectsByUserIdResponse) Reset() {
	*x = GetPrivateSubjectsByUserIdResponse{}
	mi := &file_subject_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateSubjectsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateSubjectsByUserIdResponse) ProtoMessage() {}

func (x *GetPrivateSubjectsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateSubjectsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetPrivateSubjectsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{5}
}

func (x *GetPrivateSubjectsByUserIdResponse) GetSubjects() []*FullSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type GetFavouriteSubjectsByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetFavouriteSubjectsByUserIdRequest) Reset() {
	*x = GetFavouriteSubjectsByUserIdRequest{}
	mi := &file_subject_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavouriteSubjectsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavouriteSubjectsByUserIdRequest) ProtoMessage() {}

func (x *GetFavouriteSubjectsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavouriteSubjectsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetFavouriteSubjectsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{6}
}

func (x *GetFavouriteSubjectsByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFavouriteSubjectsByUserIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetFavouriteSubjectsByUserIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFavouriteSubjectsByUserIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetFavouriteSubjectsByUserIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetFavouriteSubjectsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*FullSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *GetFavouriteSubjectsByUserIdResponse) Reset() {
	*x = GetFavouriteSubjectsByUserIdResponse{}
	mi := &file_subject_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavouriteSubjectsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavouriteSubjectsByUserIdResponse) ProtoMessage() {}

func (x *GetFavouriteSubjectsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavouriteSubjectsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetFavouriteSubjectsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{7}
}

func (x *GetFavouriteSubjectsByUserIdResponse) GetSubjects() []*FullSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type GetSubjectByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId uint64 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *GetSubjectByIdRequest) Reset() {
	*x = GetSubjectByIdRequest{}
	mi := &file_subject_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByIdRequest) ProtoMessage() {}

func (x *GetSubjectByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByIdRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectByIdRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubjectByIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSubjectByIdRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type GetSubjectByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject *FullSubject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (x *GetSubjectByIdResponse) Reset() {
	*x = GetSubjectByIdResponse{}
	mi := &file_subject_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectByIdResponse) ProtoMessage() {}

func (x *GetSubjectByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectByIdResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectByIdResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubjectByIdResponse) GetSubject() *FullSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

type GetSubjectsByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetSubjectsByUserIdRequest) Reset() {
	*x = GetSubjectsByUserIdRequest{}
	mi := &file_subject_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectsByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsByUserIdRequest) ProtoMessage() {}

func (x *GetSubjectsByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectsByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubjectsByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSubjectsByUserIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSubjectsByUserIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSubjectsByUserIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetSubjectsByUserIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetSubjectsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*FullSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *GetSubjectsByUserIdResponse) Reset() {
	*x = GetSubjectsByUserIdResponse{}
	mi := &file_subject_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsByUserIdResponse) ProtoMessage() {}

func (x *GetSubjectsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubjectsByUserIdResponse) GetSubjects() []*FullSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type GetSubjectsByNameSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SearchQuery      string                    `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,5,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,6,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetSubjectsByNameSearchRequest) Reset() {
	*x = GetSubjectsByNameSearchRequest{}
	mi := &file_subject_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectsByNameSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsByNameSearchRequest) ProtoMessage() {}

func (x *GetSubjectsByNameSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsByNameSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSubjectsByNameSearchRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubjectsByNameSearchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSubjectsByNameSearchRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetSubjectsByNameSearchRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetSubjectsByNameSearchRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetSubjectsByNameSearchRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetSubjectsByNameSearchRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetSubjectsByNameSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subjects []*FullSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
}

func (x *GetSubjectsByNameSearchResponse) Reset() {
	*x = GetSubjectsByNameSearchResponse{}
	mi := &file_subject_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubjectsByNameSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsByNameSearchResponse) ProtoMessage() {}

func (x *GetSubjectsByNameSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsByNameSearchResponse.ProtoReflect.Descriptor instead.
func (*GetSubjectsByNameSearchResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubjectsByNameSearchResponse) GetSubjects() []*FullSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

type UpdateSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId          uint64 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName        string `protobuf:"bytes,3,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	SubjectDescription string `protobuf:"bytes,4,opt,name=subject_description,json=subjectDescription,proto3" json:"subject_description,omitempty"`
	IsPublic           bool   `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *UpdateSubjectRequest) Reset() {
	*x = UpdateSubjectRequest{}
	mi := &file_subject_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectRequest) ProtoMessage() {}

func (x *UpdateSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubjectRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSubjectRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateSubjectRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *UpdateSubjectRequest) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *UpdateSubjectRequest) GetSubjectDescription() string {
	if x != nil {
		return x.SubjectDescription
	}
	return ""
}

func (x *UpdateSubjectRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type UpdateSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSubjectResponse) Reset() {
	*x = UpdateSubjectResponse{}
	mi := &file_subject_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubjectResponse) ProtoMessage() {}

func (x *UpdateSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubjectResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubjectResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{15}
}

type DeleteSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId uint64 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *DeleteSubjectRequest) Reset() {
	*x = DeleteSubjectRequest{}
	mi := &file_subject_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectRequest) ProtoMessage() {}

func (x *DeleteSubjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubjectRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSubjectRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteSubjectRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type DeleteSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubjectResponse) Reset() {
	*x = DeleteSubjectResponse{}
	mi := &file_subject_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectResponse) ProtoMessage() {}

func (x *DeleteSubjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubjectResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{17}
}

type SetUserSubjectFavouriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId   uint64 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	IsFavourite bool   `protobuf:"varint,3,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *SetUserSubjectFavouriteRequest) Reset() {
	*x = SetUserSubjectFavouriteRequest{}
	mi := &file_subject_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserSubjectFavouriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSubjectFavouriteRequest) ProtoMessage() {}

func (x *SetUserSubjectFavouriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSubjectFavouriteRequest.ProtoReflect.Descriptor instead.
func (*SetUserSubjectFavouriteRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{18}
}

func (x *SetUserSubjectFavouriteRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserSubjectFavouriteRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SetUserSubjectFavouriteRequest) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

type SetUserSubjectFavouriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserSubjectFavouriteResponse) Reset() {
	*x = SetUserSubjectFavouriteResponse{}
	mi := &file_subject_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserSubjectFavouriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSubjectFavouriteResponse) ProtoMessage() {}

func (x *SetUserSubjectFavouriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSubjectFavouriteResponse.ProtoReflect.Descriptor instead.
func (*SetUserSubjectFavouriteResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{19}
}

type SetUserSubjectRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId       uint64                 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	UserSubjectRole common.UserSubjectRole `protobuf:"varint,3,opt,name=user_subject_role,json=userSubjectRole,proto3,enum=common.UserSubjectRole" json:"user_subject_role,omitempty"`
}

func (x *SetUserSubjectRoleRequest) Reset() {
	*x = SetUserSubjectRoleRequest{}
	mi := &file_subject_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserSubjectRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSubjectRoleRequest) ProtoMessage() {}

func (x *SetUserSubjectRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSubjectRoleRequest.ProtoReflect.Descriptor instead.
func (*SetUserSubjectRoleRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{20}
}

func (x *SetUserSubjectRoleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserSubjectRoleRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SetUserSubjectRoleRequest) GetUserSubjectRole() common.UserSubjectRole {
	if x != nil {
		return x.UserSubjectRole
	}
	return common.UserSubjectRole(0)
}

type SetUserSubjectRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserSubjectRoleResponse) Reset() {
	*x = SetUserSubjectRoleResponse{}
	mi := &file_subject_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserSubjectRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserSubjectRoleResponse) ProtoMessage() {}

func (x *SetUserSubjectRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserSubjectRoleResponse.ProtoReflect.Descriptor instead.
func (*SetUserSubjectRoleResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{21}
}

// should be repeated module_id
type SetSubjectModuleMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId uint64   `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	ModuleIds []uint64 `protobuf:"varint,3,rep,packed,name=module_ids,json=moduleIds,proto3" json:"module_ids,omitempty"`
}

func (x *SetSubjectModuleMappingRequest) Reset() {
	*x = SetSubjectModuleMappingRequest{}
	mi := &file_subject_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubjectModuleMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectModuleMappingRequest) ProtoMessage() {}

func (x *SetSubjectModuleMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectModuleMappingRequest.ProtoReflect.Descriptor instead.
func (*SetSubjectModuleMappingRequest) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{22}
}

func (x *SetSubjectModuleMappingRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetSubjectModuleMappingRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *SetSubjectModuleMappingRequest) GetModuleIds() []uint64 {
	if x != nil {
		return x.ModuleIds
	}
	return nil
}

type SetSubjectModuleMappingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSubjectModuleMappingResponse) Reset() {
	*x = SetSubjectModuleMappingResponse{}
	mi := &file_subject_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetSubjectModuleMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSubjectModuleMappingResponse) ProtoMessage() {}

func (x *SetSubjectModuleMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSubjectModuleMappingResponse.ProtoReflect.Descriptor instead.
func (*SetSubjectModuleMappingResponse) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{23}
}

// Consolidated Models
type FullSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject         *DBSubject             `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	UserSubjectRole common.UserSubjectRole `protobuf:"varint,2,opt,name=user_subject_role,json=userSubjectRole,proto3,enum=common.UserSubjectRole" json:"user_subject_role,omitempty"`
	IsFavourite     bool                   `protobuf:"varint,3,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *FullSubject) Reset() {
	*x = FullSubject{}
	mi := &file_subject_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullSubject) ProtoMessage() {}

func (x *FullSubject) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullSubject.ProtoReflect.Descriptor instead.
func (*FullSubject) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{24}
}

func (x *FullSubject) GetSubject() *DBSubject {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *FullSubject) GetUserSubjectRole() common.UserSubjectRole {
	if x != nil {
		return x.UserSubjectRole
	}
	return common.UserSubjectRole(0)
}

func (x *FullSubject) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

// DB Models
type DBUserSubjectMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint64                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId       uint64                 `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	UserSubjectRole common.UserSubjectRole `protobuf:"varint,3,opt,name=user_subject_role,json=userSubjectRole,proto3,enum=common.UserSubjectRole" json:"user_subject_role,omitempty"`
	IsFavourite     bool                   `protobuf:"varint,4,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *DBUserSubjectMap) Reset() {
	*x = DBUserSubjectMap{}
	mi := &file_subject_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBUserSubjectMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUserSubjectMap) ProtoMessage() {}

func (x *DBUserSubjectMap) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUserSubjectMap.ProtoReflect.Descriptor instead.
func (*DBUserSubjectMap) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{25}
}

func (x *DBUserSubjectMap) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DBUserSubjectMap) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *DBUserSubjectMap) GetUserSubjectRole() common.UserSubjectRole {
	if x != nil {
		return x.UserSubjectRole
	}
	return common.UserSubjectRole(0)
}

func (x *DBUserSubjectMap) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

type DBSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId          uint64 `protobuf:"varint,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	SubjectName        string `protobuf:"bytes,2,opt,name=subject_name,json=subjectName,proto3" json:"subject_name,omitempty"`
	SubjectDescription string `protobuf:"bytes,3,opt,name=subject_description,json=subjectDescription,proto3" json:"subject_description,omitempty"`
	IsPublic           bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	CreatedTime        uint64 `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime        uint64 `protobuf:"varint,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *DBSubject) Reset() {
	*x = DBSubject{}
	mi := &file_subject_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSubject) ProtoMessage() {}

func (x *DBSubject) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSubject.ProtoReflect.Descriptor instead.
func (*DBSubject) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{26}
}

func (x *DBSubject) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *DBSubject) GetSubjectName() string {
	if x != nil {
		return x.SubjectName
	}
	return ""
}

func (x *DBSubject) GetSubjectDescription() string {
	if x != nil {
		return x.SubjectDescription
	}
	return ""
}

func (x *DBSubject) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *DBSubject) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DBSubject) GetUpdatedTime() uint64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type DBSubjectModuleMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId uint64 `protobuf:"varint,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	ModuleId  uint64 `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *DBSubjectModuleMap) Reset() {
	*x = DBSubjectModuleMap{}
	mi := &file_subject_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBSubjectModuleMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBSubjectModuleMap) ProtoMessage() {}

func (x *DBSubjectModuleMap) ProtoReflect() protoreflect.Message {
	mi := &file_subject_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBSubjectModuleMap.ProtoReflect.Descriptor instead.
func (*DBSubjectModuleMap) Descriptor() ([]byte, []int) {
	return file_subject_proto_rawDescGZIP(), []int{27}
}

func (x *DBSubjectModuleMap) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *DBSubjectModuleMap) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

var File_subject_proto protoreflect.FileDescriptor

var file_subject_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x56, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x58, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x1c,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x1e,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x6c,
	0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x44, 0x42, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0xb2,
	0x01, 0x0a, 0x10, 0x44, 0x42, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x69, 0x74, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x44, 0x42, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x44, 0x42, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x32, 0xae, 0x09, 0x0a, 0x0e, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e,
	0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4e, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x17,
	0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x62, 0x66,
	0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subject_proto_rawDescOnce sync.Once
	file_subject_proto_rawDescData = file_subject_proto_rawDesc
)

func file_subject_proto_rawDescGZIP() []byte {
	file_subject_proto_rawDescOnce.Do(func() {
		file_subject_proto_rawDescData = protoimpl.X.CompressGZIP(file_subject_proto_rawDescData)
	})
	return file_subject_proto_rawDescData
}

var file_subject_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_subject_proto_goTypes = []any{
	(*CreateSubjectRequest)(nil),                 // 0: subject.CreateSubjectRequest
	(*CreateSubjectResponse)(nil),                // 1: subject.CreateSubjectResponse
	(*GetPublicSubjectsRequest)(nil),             // 2: subject.GetPublicSubjectsRequest
	(*GetPublicSubjectsResponse)(nil),            // 3: subject.GetPublicSubjectsResponse
	(*GetPrivateSubjectsByUserIdRequest)(nil),    // 4: subject.GetPrivateSubjectsByUserIdRequest
	(*GetPrivateSubjectsByUserIdResponse)(nil),   // 5: subject.GetPrivateSubjectsByUserIdResponse
	(*GetFavouriteSubjectsByUserIdRequest)(nil),  // 6: subject.GetFavouriteSubjectsByUserIdRequest
	(*GetFavouriteSubjectsByUserIdResponse)(nil), // 7: subject.GetFavouriteSubjectsByUserIdResponse
	(*GetSubjectByIdRequest)(nil),                // 8: subject.GetSubjectByIdRequest
	(*GetSubjectByIdResponse)(nil),               // 9: subject.GetSubjectByIdResponse
	(*GetSubjectsByUserIdRequest)(nil),           // 10: subject.GetSubjectsByUserIdRequest
	(*GetSubjectsByUserIdResponse)(nil),          // 11: subject.GetSubjectsByUserIdResponse
	(*GetSubjectsByNameSearchRequest)(nil),       // 12: subject.GetSubjectsByNameSearchRequest
	(*GetSubjectsByNameSearchResponse)(nil),      // 13: subject.GetSubjectsByNameSearchResponse
	(*UpdateSubjectRequest)(nil),                 // 14: subject.UpdateSubjectRequest
	(*UpdateSubjectResponse)(nil),                // 15: subject.UpdateSubjectResponse
	(*DeleteSubjectRequest)(nil),                 // 16: subject.DeleteSubjectRequest
	(*DeleteSubjectResponse)(nil),                // 17: subject.DeleteSubjectResponse
	(*SetUserSubjectFavouriteRequest)(nil),       // 18: subject.SetUserSubjectFavouriteRequest
	(*SetUserSubjectFavouriteResponse)(nil),      // 19: subject.SetUserSubjectFavouriteResponse
	(*SetUserSubjectRoleRequest)(nil),            // 20: subject.SetUserSubjectRoleRequest
	(*SetUserSubjectRoleResponse)(nil),           // 21: subject.SetUserSubjectRoleResponse
	(*SetSubjectModuleMappingRequest)(nil),       // 22: subject.SetSubjectModuleMappingRequest
	(*SetSubjectModuleMappingResponse)(nil),      // 23: subject.SetSubjectModuleMappingResponse
	(*FullSubject)(nil),                          // 24: subject.FullSubject
	(*DBUserSubjectMap)(nil),                     // 25: subject.DBUserSubjectMap
	(*DBSubject)(nil),                            // 26: subject.DBSubject
	(*DBSubjectModuleMap)(nil),                   // 27: subject.DBSubjectModuleMap
	(common.ORDER_BY_FIELD)(0),                   // 28: common.ORDER_BY_FIELD
	(common.ORDER_BY_DIRECTION)(0),               // 29: common.ORDER_BY_DIRECTION
	(common.UserSubjectRole)(0),                  // 30: common.UserSubjectRole
}
var file_subject_proto_depIdxs = []int32{
	28, // 0: subject.GetPublicSubjectsRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	29, // 1: subject.GetPublicSubjectsRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	24, // 2: subject.GetPublicSubjectsResponse.subjects:type_name -> subject.FullSubject
	28, // 3: subject.GetPrivateSubjectsByUserIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	29, // 4: subject.GetPrivateSubjectsByUserIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	24, // 5: subject.GetPrivateSubjectsByUserIdResponse.subjects:type_name -> subject.FullSubject
	28, // 6: subject.GetFavouriteSubjectsByUserIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	29, // 7: subject.GetFavouriteSubjectsByUserIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	24, // 8: subject.GetFavouriteSubjectsByUserIdResponse.subjects:type_name -> subject.FullSubject
	24, // 9: subject.GetSubjectByIdResponse.subject:type_name -> subject.FullSubject
	28, // 10: subject.GetSubjectsByUserIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	29, // 11: subject.GetSubjectsByUserIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	24, // 12: subject.GetSubjectsByUserIdResponse.subjects:type_name -> subject.FullSubject
	28, // 13: subject.GetSubjectsByNameSearchRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	29, // 14: subject.GetSubjectsByNameSearchRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	24, // 15: subject.GetSubjectsByNameSearchResponse.subjects:type_name -> subject.FullSubject
	30, // 16: subject.SetUserSubjectRoleRequest.user_subject_role:type_name -> common.UserSubjectRole
	26, // 17: subject.FullSubject.subject:type_name -> subject.DBSubject
	30, // 18: subject.FullSubject.user_subject_role:type_name -> common.UserSubjectRole
	30, // 19: subject.DBUserSubjectMap.user_subject_role:type_name -> common.UserSubjectRole
	0,  // 20: subject.SubjectService.CreateSubject:input_type -> subject.CreateSubjectRequest
	2,  // 21: subject.SubjectService.GetPublicSubjects:input_type -> subject.GetPublicSubjectsRequest
	4,  // 22: subject.SubjectService.GetPrivateSubjectsByUserId:input_type -> subject.GetPrivateSubjectsByUserIdRequest
	6,  // 23: subject.SubjectService.GetFavouriteSubjectsByUserId:input_type -> subject.GetFavouriteSubjectsByUserIdRequest
	8,  // 24: subject.SubjectService.GetSubjectById:input_type -> subject.GetSubjectByIdRequest
	10, // 25: subject.SubjectService.GetSubjectsByUserId:input_type -> subject.GetSubjectsByUserIdRequest
	12, // 26: subject.SubjectService.GetSubjectsByNameSearch:input_type -> subject.GetSubjectsByNameSearchRequest
	14, // 27: subject.SubjectService.UpdateSubject:input_type -> subject.UpdateSubjectRequest
	16, // 28: subject.SubjectService.DeleteSubject:input_type -> subject.DeleteSubjectRequest
	18, // 29: subject.SubjectService.SetUserSubjectFavourite:input_type -> subject.SetUserSubjectFavouriteRequest
	20, // 30: subject.SubjectService.SetUserSubjectRole:input_type -> subject.SetUserSubjectRoleRequest
	22, // 31: subject.SubjectService.SetSubjectModuleMapping:input_type -> subject.SetSubjectModuleMappingRequest
	1,  // 32: subject.SubjectService.CreateSubject:output_type -> subject.CreateSubjectResponse
	3,  // 33: subject.SubjectService.GetPublicSubjects:output_type -> subject.GetPublicSubjectsResponse
	5,  // 34: subject.SubjectService.GetPrivateSubjectsByUserId:output_type -> subject.GetPrivateSubjectsByUserIdResponse
	7,  // 35: subject.SubjectService.GetFavouriteSubjectsByUserId:output_type -> subject.GetFavouriteSubjectsByUserIdResponse
	9,  // 36: subject.SubjectService.GetSubjectById:output_type -> subject.GetSubjectByIdResponse
	11, // 37: subject.SubjectService.GetSubjectsByUserId:output_type -> subject.GetSubjectsByUserIdResponse
	13, // 38: subject.SubjectService.GetSubjectsByNameSearch:output_type -> subject.GetSubjectsByNameSearchResponse
	15, // 39: subject.SubjectService.UpdateSubject:output_type -> subject.UpdateSubjectResponse
	17, // 40: subject.SubjectService.DeleteSubject:output_type -> subject.DeleteSubjectResponse
	19, // 41: subject.SubjectService.SetUserSubjectFavourite:output_type -> subject.SetUserSubjectFavouriteResponse
	21, // 42: subject.SubjectService.SetUserSubjectRole:output_type -> subject.SetUserSubjectRoleResponse
	23, // 43: subject.SubjectService.SetSubjectModuleMapping:output_type -> subject.SetSubjectModuleMappingResponse
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_subject_proto_init() }
func file_subject_proto_init() {
	if File_subject_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subject_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subject_proto_goTypes,
		DependencyIndexes: file_subject_proto_depIdxs,
		MessageInfos:      file_subject_proto_msgTypes,
	}.Build()
	File_subject_proto = out.File
	file_subject_proto_rawDesc = nil
	file_subject_proto_goTypes = nil
	file_subject_proto_depIdxs = nil
}
