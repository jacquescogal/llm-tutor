// memory.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/memory.proto

package memory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubjectService_CreateSubject_FullMethodName           = "/SubjectService/CreateSubject"
	SubjectService_GetSubjectById_FullMethodName          = "/SubjectService/GetSubjectById"
	SubjectService_GetSubjectsByUserId_FullMethodName     = "/SubjectService/GetSubjectsByUserId"
	SubjectService_GetSubjectsByNameSearch_FullMethodName = "/SubjectService/GetSubjectsByNameSearch"
	SubjectService_UpdateSubject_FullMethodName           = "/SubjectService/UpdateSubject"
	SubjectService_DeleteSubject_FullMethodName           = "/SubjectService/DeleteSubject"
)

// SubjectServiceClient is the client API for SubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectServiceClient interface {
	CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*CreateSubjectResponse, error)
	GetSubjectById(ctx context.Context, in *GetSubjectByIdRequest, opts ...grpc.CallOption) (*GetSubjectByIdResponse, error)
	GetSubjectsByUserId(ctx context.Context, in *GetSubjectsByUserIdRequest, opts ...grpc.CallOption) (*GetSubjectsByUserIdResponse, error)
	GetSubjectsByNameSearch(ctx context.Context, in *GetSubjectsByNameSearchRequest, opts ...grpc.CallOption) (*GetSubjectsByNameSearchResponse, error)
	UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*UpdateSubjectResponse, error)
	DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectResponse, error)
}

type subjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectServiceClient(cc grpc.ClientConnInterface) SubjectServiceClient {
	return &subjectServiceClient{cc}
}

func (c *subjectServiceClient) CreateSubject(ctx context.Context, in *CreateSubjectRequest, opts ...grpc.CallOption) (*CreateSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSubjectResponse)
	err := c.cc.Invoke(ctx, SubjectService_CreateSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) GetSubjectById(ctx context.Context, in *GetSubjectByIdRequest, opts ...grpc.CallOption) (*GetSubjectByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubjectByIdResponse)
	err := c.cc.Invoke(ctx, SubjectService_GetSubjectById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) GetSubjectsByUserId(ctx context.Context, in *GetSubjectsByUserIdRequest, opts ...grpc.CallOption) (*GetSubjectsByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubjectsByUserIdResponse)
	err := c.cc.Invoke(ctx, SubjectService_GetSubjectsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) GetSubjectsByNameSearch(ctx context.Context, in *GetSubjectsByNameSearchRequest, opts ...grpc.CallOption) (*GetSubjectsByNameSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubjectsByNameSearchResponse)
	err := c.cc.Invoke(ctx, SubjectService_GetSubjectsByNameSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*UpdateSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSubjectResponse)
	err := c.cc.Invoke(ctx, SubjectService_UpdateSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...grpc.CallOption) (*DeleteSubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubjectResponse)
	err := c.cc.Invoke(ctx, SubjectService_DeleteSubject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServiceServer is the server API for SubjectService service.
// All implementations must embed UnimplementedSubjectServiceServer
// for forward compatibility.
type SubjectServiceServer interface {
	CreateSubject(context.Context, *CreateSubjectRequest) (*CreateSubjectResponse, error)
	GetSubjectById(context.Context, *GetSubjectByIdRequest) (*GetSubjectByIdResponse, error)
	GetSubjectsByUserId(context.Context, *GetSubjectsByUserIdRequest) (*GetSubjectsByUserIdResponse, error)
	GetSubjectsByNameSearch(context.Context, *GetSubjectsByNameSearchRequest) (*GetSubjectsByNameSearchResponse, error)
	UpdateSubject(context.Context, *UpdateSubjectRequest) (*UpdateSubjectResponse, error)
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectResponse, error)
	mustEmbedUnimplementedSubjectServiceServer()
}

// UnimplementedSubjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubjectServiceServer struct{}

func (UnimplementedSubjectServiceServer) CreateSubject(context.Context, *CreateSubjectRequest) (*CreateSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubject not implemented")
}
func (UnimplementedSubjectServiceServer) GetSubjectById(context.Context, *GetSubjectByIdRequest) (*GetSubjectByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectById not implemented")
}
func (UnimplementedSubjectServiceServer) GetSubjectsByUserId(context.Context, *GetSubjectsByUserIdRequest) (*GetSubjectsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectsByUserId not implemented")
}
func (UnimplementedSubjectServiceServer) GetSubjectsByNameSearch(context.Context, *GetSubjectsByNameSearchRequest) (*GetSubjectsByNameSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectsByNameSearch not implemented")
}
func (UnimplementedSubjectServiceServer) UpdateSubject(context.Context, *UpdateSubjectRequest) (*UpdateSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubject not implemented")
}
func (UnimplementedSubjectServiceServer) DeleteSubject(context.Context, *DeleteSubjectRequest) (*DeleteSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedSubjectServiceServer) mustEmbedUnimplementedSubjectServiceServer() {}
func (UnimplementedSubjectServiceServer) testEmbeddedByValue()                        {}

// UnsafeSubjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectServiceServer will
// result in compilation errors.
type UnsafeSubjectServiceServer interface {
	mustEmbedUnimplementedSubjectServiceServer()
}

func RegisterSubjectServiceServer(s grpc.ServiceRegistrar, srv SubjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubjectService_ServiceDesc, srv)
}

func _SubjectService_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_CreateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).CreateSubject(ctx, req.(*CreateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_GetSubjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).GetSubjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_GetSubjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).GetSubjectById(ctx, req.(*GetSubjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_GetSubjectsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).GetSubjectsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_GetSubjectsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).GetSubjectsByUserId(ctx, req.(*GetSubjectsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_GetSubjectsByNameSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsByNameSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).GetSubjectsByNameSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_GetSubjectsByNameSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).GetSubjectsByNameSearch(ctx, req.(*GetSubjectsByNameSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_UpdateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).UpdateSubject(ctx, req.(*UpdateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubjectService_DeleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).DeleteSubject(ctx, req.(*DeleteSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubjectService_ServiceDesc is the grpc.ServiceDesc for SubjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SubjectService",
	HandlerType: (*SubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubject",
			Handler:    _SubjectService_CreateSubject_Handler,
		},
		{
			MethodName: "GetSubjectById",
			Handler:    _SubjectService_GetSubjectById_Handler,
		},
		{
			MethodName: "GetSubjectsByUserId",
			Handler:    _SubjectService_GetSubjectsByUserId_Handler,
		},
		{
			MethodName: "GetSubjectsByNameSearch",
			Handler:    _SubjectService_GetSubjectsByNameSearch_Handler,
		},
		{
			MethodName: "UpdateSubject",
			Handler:    _SubjectService_UpdateSubject_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _SubjectService_DeleteSubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/memory.proto",
}

const (
	ModuleService_CreateModule_FullMethodName           = "/ModuleService/CreateModule"
	ModuleService_GetModuleById_FullMethodName          = "/ModuleService/GetModuleById"
	ModuleService_GetModulesBySubjectId_FullMethodName  = "/ModuleService/GetModulesBySubjectId"
	ModuleService_GetModulesByNameSearch_FullMethodName = "/ModuleService/GetModulesByNameSearch"
	ModuleService_UpdateModule_FullMethodName           = "/ModuleService/UpdateModule"
	ModuleService_DeleteModule_FullMethodName           = "/ModuleService/DeleteModule"
)

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	GetModuleById(ctx context.Context, in *GetModuleByIdRequest, opts ...grpc.CallOption) (*GetModuleByIdResponse, error)
	GetModulesBySubjectId(ctx context.Context, in *GetModulesBySubjectIdRequest, opts ...grpc.CallOption) (*GetModulesBySubjectIdResponse, error)
	GetModulesByNameSearch(ctx context.Context, in *GetModulesByNameSearchRequest, opts ...grpc.CallOption) (*GetModulesByNameSearchResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleById(ctx context.Context, in *GetModuleByIdRequest, opts ...grpc.CallOption) (*GetModuleByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModuleByIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModuleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModulesBySubjectId(ctx context.Context, in *GetModulesBySubjectIdRequest, opts ...grpc.CallOption) (*GetModulesBySubjectIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModulesBySubjectIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModulesBySubjectId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModulesByNameSearch(ctx context.Context, in *GetModulesByNameSearchRequest, opts ...grpc.CallOption) (*GetModulesByNameSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModulesByNameSearchResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModulesByNameSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_DeleteModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility.
type ModuleServiceServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	GetModuleById(context.Context, *GetModuleByIdRequest) (*GetModuleByIdResponse, error)
	GetModulesBySubjectId(context.Context, *GetModulesBySubjectIdRequest) (*GetModulesBySubjectIdResponse, error)
	GetModulesByNameSearch(context.Context, *GetModulesByNameSearchRequest) (*GetModulesByNameSearchResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServiceServer struct{}

func (UnimplementedModuleServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleById(context.Context, *GetModuleByIdRequest) (*GetModuleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleById not implemented")
}
func (UnimplementedModuleServiceServer) GetModulesBySubjectId(context.Context, *GetModulesBySubjectIdRequest) (*GetModulesBySubjectIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesBySubjectId not implemented")
}
func (UnimplementedModuleServiceServer) GetModulesByNameSearch(context.Context, *GetModulesByNameSearchRequest) (*GetModulesByNameSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesByNameSearch not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}
func (UnimplementedModuleServiceServer) testEmbeddedByValue()                       {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModuleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleById(ctx, req.(*GetModuleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModulesBySubjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModulesBySubjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModulesBySubjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModulesBySubjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModulesBySubjectId(ctx, req.(*GetModulesBySubjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModulesByNameSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModulesByNameSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModulesByNameSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModulesByNameSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModulesByNameSearch(ctx, req.(*GetModulesByNameSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _ModuleService_CreateModule_Handler,
		},
		{
			MethodName: "GetModuleById",
			Handler:    _ModuleService_GetModuleById_Handler,
		},
		{
			MethodName: "GetModulesBySubjectId",
			Handler:    _ModuleService_GetModulesBySubjectId_Handler,
		},
		{
			MethodName: "GetModulesByNameSearch",
			Handler:    _ModuleService_GetModulesByNameSearch_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModuleService_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModuleService_DeleteModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/memory.proto",
}

const (
	DocService_CreateDoc_FullMethodName           = "/DocService/CreateDoc"
	DocService_GetDocById_FullMethodName          = "/DocService/GetDocById"
	DocService_GetDocsByModuleId_FullMethodName   = "/DocService/GetDocsByModuleId"
	DocService_GetDocsByNameSearch_FullMethodName = "/DocService/GetDocsByNameSearch"
	DocService_UpdateDoc_FullMethodName           = "/DocService/UpdateDoc"
	DocService_DeleteDoc_FullMethodName           = "/DocService/DeleteDoc"
)

// DocServiceClient is the client API for DocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocServiceClient interface {
	CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error)
	GetDocById(ctx context.Context, in *GetDocByIdRequest, opts ...grpc.CallOption) (*GetDocByIdResponse, error)
	GetDocsByModuleId(ctx context.Context, in *GetDocsByModuleIdRequest, opts ...grpc.CallOption) (*GetDocsByModuleIdResponse, error)
	GetDocsByNameSearch(ctx context.Context, in *GetDocsByNameSearchRequest, opts ...grpc.CallOption) (*GetDocsByNameSearchResponse, error)
	UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error)
	DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error)
}

type docServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocServiceClient(cc grpc.ClientConnInterface) DocServiceClient {
	return &docServiceClient{cc}
}

func (c *docServiceClient) CreateDoc(ctx context.Context, in *CreateDocRequest, opts ...grpc.CallOption) (*CreateDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDocResponse)
	err := c.cc.Invoke(ctx, DocService_CreateDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocById(ctx context.Context, in *GetDocByIdRequest, opts ...grpc.CallOption) (*GetDocByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocByIdResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocsByModuleId(ctx context.Context, in *GetDocsByModuleIdRequest, opts ...grpc.CallOption) (*GetDocsByModuleIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocsByModuleIdResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocsByModuleId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetDocsByNameSearch(ctx context.Context, in *GetDocsByNameSearchRequest, opts ...grpc.CallOption) (*GetDocsByNameSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocsByNameSearchResponse)
	err := c.cc.Invoke(ctx, DocService_GetDocsByNameSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) UpdateDoc(ctx context.Context, in *UpdateDocRequest, opts ...grpc.CallOption) (*UpdateDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocResponse)
	err := c.cc.Invoke(ctx, DocService_UpdateDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) DeleteDoc(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocResponse)
	err := c.cc.Invoke(ctx, DocService_DeleteDoc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocServiceServer is the server API for DocService service.
// All implementations must embed UnimplementedDocServiceServer
// for forward compatibility.
type DocServiceServer interface {
	CreateDoc(context.Context, *CreateDocRequest) (*CreateDocResponse, error)
	GetDocById(context.Context, *GetDocByIdRequest) (*GetDocByIdResponse, error)
	GetDocsByModuleId(context.Context, *GetDocsByModuleIdRequest) (*GetDocsByModuleIdResponse, error)
	GetDocsByNameSearch(context.Context, *GetDocsByNameSearchRequest) (*GetDocsByNameSearchResponse, error)
	UpdateDoc(context.Context, *UpdateDocRequest) (*UpdateDocResponse, error)
	DeleteDoc(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error)
	mustEmbedUnimplementedDocServiceServer()
}

// UnimplementedDocServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocServiceServer struct{}

func (UnimplementedDocServiceServer) CreateDoc(context.Context, *CreateDocRequest) (*CreateDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoc not implemented")
}
func (UnimplementedDocServiceServer) GetDocById(context.Context, *GetDocByIdRequest) (*GetDocByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocById not implemented")
}
func (UnimplementedDocServiceServer) GetDocsByModuleId(context.Context, *GetDocsByModuleIdRequest) (*GetDocsByModuleIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocsByModuleId not implemented")
}
func (UnimplementedDocServiceServer) GetDocsByNameSearch(context.Context, *GetDocsByNameSearchRequest) (*GetDocsByNameSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocsByNameSearch not implemented")
}
func (UnimplementedDocServiceServer) UpdateDoc(context.Context, *UpdateDocRequest) (*UpdateDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoc not implemented")
}
func (UnimplementedDocServiceServer) DeleteDoc(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoc not implemented")
}
func (UnimplementedDocServiceServer) mustEmbedUnimplementedDocServiceServer() {}
func (UnimplementedDocServiceServer) testEmbeddedByValue()                    {}

// UnsafeDocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocServiceServer will
// result in compilation errors.
type UnsafeDocServiceServer interface {
	mustEmbedUnimplementedDocServiceServer()
}

func RegisterDocServiceServer(s grpc.ServiceRegistrar, srv DocServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocService_ServiceDesc, srv)
}

func _DocService_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_CreateDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).CreateDoc(ctx, req.(*CreateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocById(ctx, req.(*GetDocByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocsByModuleId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsByModuleIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocsByModuleId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocsByModuleId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocsByModuleId(ctx, req.(*GetDocsByModuleIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetDocsByNameSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocsByNameSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocsByNameSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_GetDocsByNameSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocsByNameSearch(ctx, req.(*GetDocsByNameSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_UpdateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).UpdateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_UpdateDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).UpdateDoc(ctx, req.(*UpdateDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_DeleteDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).DeleteDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocService_DeleteDoc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).DeleteDoc(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocService_ServiceDesc is the grpc.ServiceDesc for DocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DocService",
	HandlerType: (*DocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoc",
			Handler:    _DocService_CreateDoc_Handler,
		},
		{
			MethodName: "GetDocById",
			Handler:    _DocService_GetDocById_Handler,
		},
		{
			MethodName: "GetDocsByModuleId",
			Handler:    _DocService_GetDocsByModuleId_Handler,
		},
		{
			MethodName: "GetDocsByNameSearch",
			Handler:    _DocService_GetDocsByNameSearch_Handler,
		},
		{
			MethodName: "UpdateDoc",
			Handler:    _DocService_UpdateDoc_Handler,
		},
		{
			MethodName: "DeleteDoc",
			Handler:    _DocService_DeleteDoc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/memory.proto",
}

const (
	MemoryService_CreateMemory_FullMethodName                   = "/MemoryService/CreateMemory"
	MemoryService_GetMemoryById_FullMethodName                  = "/MemoryService/GetMemoryById"
	MemoryService_GetMemoriesByDocId_FullMethodName             = "/MemoryService/GetMemoriesByDocId"
	MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName = "/MemoryService/GetMemoriesByMemoryTitleSearch"
	MemoryService_UpdateMemory_FullMethodName                   = "/MemoryService/UpdateMemory"
	MemoryService_DeleteMemory_FullMethodName                   = "/MemoryService/DeleteMemory"
)

// MemoryServiceClient is the client API for MemoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryServiceClient interface {
	CreateMemory(ctx context.Context, in *CreateMemoryRequest, opts ...grpc.CallOption) (*CreateMemoryResponse, error)
	GetMemoryById(ctx context.Context, in *GetMemoryByIdRequest, opts ...grpc.CallOption) (*GetMemoryByIdResponse, error)
	GetMemoriesByDocId(ctx context.Context, in *GetMemoriesByDocIdRequest, opts ...grpc.CallOption) (*GetMemoriesByDocIdResponse, error)
	GetMemoriesByMemoryTitleSearch(ctx context.Context, in *GetMemoriesByMemoryTitleSearchRequest, opts ...grpc.CallOption) (*GetMemoriesByMemoryTitleSearchResponse, error)
	UpdateMemory(ctx context.Context, in *UpdateMemoryRequest, opts ...grpc.CallOption) (*UpdateMemoryResponse, error)
	DeleteMemory(ctx context.Context, in *DeleteMemoryRequest, opts ...grpc.CallOption) (*DeleteMemoryResponse, error)
}

type memoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryServiceClient(cc grpc.ClientConnInterface) MemoryServiceClient {
	return &memoryServiceClient{cc}
}

func (c *memoryServiceClient) CreateMemory(ctx context.Context, in *CreateMemoryRequest, opts ...grpc.CallOption) (*CreateMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_CreateMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoryById(ctx context.Context, in *GetMemoryByIdRequest, opts ...grpc.CallOption) (*GetMemoryByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoryByIdResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoriesByDocId(ctx context.Context, in *GetMemoriesByDocIdRequest, opts ...grpc.CallOption) (*GetMemoriesByDocIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoriesByDocIdResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoriesByDocId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) GetMemoriesByMemoryTitleSearch(ctx context.Context, in *GetMemoriesByMemoryTitleSearchRequest, opts ...grpc.CallOption) (*GetMemoriesByMemoryTitleSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoriesByMemoryTitleSearchResponse)
	err := c.cc.Invoke(ctx, MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) UpdateMemory(ctx context.Context, in *UpdateMemoryRequest, opts ...grpc.CallOption) (*UpdateMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_UpdateMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryServiceClient) DeleteMemory(ctx context.Context, in *DeleteMemoryRequest, opts ...grpc.CallOption) (*DeleteMemoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMemoryResponse)
	err := c.cc.Invoke(ctx, MemoryService_DeleteMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServiceServer is the server API for MemoryService service.
// All implementations must embed UnimplementedMemoryServiceServer
// for forward compatibility.
type MemoryServiceServer interface {
	CreateMemory(context.Context, *CreateMemoryRequest) (*CreateMemoryResponse, error)
	GetMemoryById(context.Context, *GetMemoryByIdRequest) (*GetMemoryByIdResponse, error)
	GetMemoriesByDocId(context.Context, *GetMemoriesByDocIdRequest) (*GetMemoriesByDocIdResponse, error)
	GetMemoriesByMemoryTitleSearch(context.Context, *GetMemoriesByMemoryTitleSearchRequest) (*GetMemoriesByMemoryTitleSearchResponse, error)
	UpdateMemory(context.Context, *UpdateMemoryRequest) (*UpdateMemoryResponse, error)
	DeleteMemory(context.Context, *DeleteMemoryRequest) (*DeleteMemoryResponse, error)
	mustEmbedUnimplementedMemoryServiceServer()
}

// UnimplementedMemoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemoryServiceServer struct{}

func (UnimplementedMemoryServiceServer) CreateMemory(context.Context, *CreateMemoryRequest) (*CreateMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemory not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoryById(context.Context, *GetMemoryByIdRequest) (*GetMemoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryById not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoriesByDocId(context.Context, *GetMemoriesByDocIdRequest) (*GetMemoriesByDocIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoriesByDocId not implemented")
}
func (UnimplementedMemoryServiceServer) GetMemoriesByMemoryTitleSearch(context.Context, *GetMemoriesByMemoryTitleSearchRequest) (*GetMemoriesByMemoryTitleSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoriesByMemoryTitleSearch not implemented")
}
func (UnimplementedMemoryServiceServer) UpdateMemory(context.Context, *UpdateMemoryRequest) (*UpdateMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemory not implemented")
}
func (UnimplementedMemoryServiceServer) DeleteMemory(context.Context, *DeleteMemoryRequest) (*DeleteMemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemory not implemented")
}
func (UnimplementedMemoryServiceServer) mustEmbedUnimplementedMemoryServiceServer() {}
func (UnimplementedMemoryServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServiceServer will
// result in compilation errors.
type UnsafeMemoryServiceServer interface {
	mustEmbedUnimplementedMemoryServiceServer()
}

func RegisterMemoryServiceServer(s grpc.ServiceRegistrar, srv MemoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemoryService_ServiceDesc, srv)
}

func _MemoryService_CreateMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).CreateMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_CreateMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).CreateMemory(ctx, req.(*CreateMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoryById(ctx, req.(*GetMemoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoriesByDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoriesByDocIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoriesByDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoriesByDocId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoriesByDocId(ctx, req.(*GetMemoriesByDocIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_GetMemoriesByMemoryTitleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoriesByMemoryTitleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).GetMemoriesByMemoryTitleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_GetMemoriesByMemoryTitleSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).GetMemoriesByMemoryTitleSearch(ctx, req.(*GetMemoriesByMemoryTitleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_UpdateMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).UpdateMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_UpdateMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).UpdateMemory(ctx, req.(*UpdateMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemoryService_DeleteMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServiceServer).DeleteMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemoryService_DeleteMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServiceServer).DeleteMemory(ctx, req.(*DeleteMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemoryService_ServiceDesc is the grpc.ServiceDesc for MemoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemoryService",
	HandlerType: (*MemoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMemory",
			Handler:    _MemoryService_CreateMemory_Handler,
		},
		{
			MethodName: "GetMemoryById",
			Handler:    _MemoryService_GetMemoryById_Handler,
		},
		{
			MethodName: "GetMemoriesByDocId",
			Handler:    _MemoryService_GetMemoriesByDocId_Handler,
		},
		{
			MethodName: "GetMemoriesByMemoryTitleSearch",
			Handler:    _MemoryService_GetMemoriesByMemoryTitleSearch_Handler,
		},
		{
			MethodName: "UpdateMemory",
			Handler:    _MemoryService_UpdateMemory_Handler,
		},
		{
			MethodName: "DeleteMemory",
			Handler:    _MemoryService_DeleteMemory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/memory.proto",
}

const (
	QuestionService_CreateQuestion_FullMethodName                    = "/QuestionService/CreateQuestion"
	QuestionService_GetQuestionById_FullMethodName                   = "/QuestionService/GetQuestionById"
	QuestionService_GetQuestionsByDocId_FullMethodName               = "/QuestionService/GetQuestionsByDocId"
	QuestionService_GetQuestionsByQuestionTitleSearch_FullMethodName = "/QuestionService/GetQuestionsByQuestionTitleSearch"
	QuestionService_UpdateQuestion_FullMethodName                    = "/QuestionService/UpdateQuestion"
	QuestionService_DeleteQuestion_FullMethodName                    = "/QuestionService/DeleteQuestion"
)

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	GetQuestionById(ctx context.Context, in *GetQuestionByIdRequest, opts ...grpc.CallOption) (*GetQuestionByIdResponse, error)
	GetQuestionsByDocId(ctx context.Context, in *GetQuestionsByDocIdRequest, opts ...grpc.CallOption) (*GetQuestionsByDocIdResponse, error)
	GetQuestionsByQuestionTitleSearch(ctx context.Context, in *GetQuestionsByQuestionTitleSearchRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionTitleSearchResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionById(ctx context.Context, in *GetQuestionByIdRequest, opts ...grpc.CallOption) (*GetQuestionByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionByIdResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetQuestionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionsByDocId(ctx context.Context, in *GetQuestionsByDocIdRequest, opts ...grpc.CallOption) (*GetQuestionsByDocIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByDocIdResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetQuestionsByDocId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) GetQuestionsByQuestionTitleSearch(ctx context.Context, in *GetQuestionsByQuestionTitleSearchRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionTitleSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByQuestionTitleSearchResponse)
	err := c.cc.Invoke(ctx, QuestionService_GetQuestionsByQuestionTitleSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility.
type QuestionServiceServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	GetQuestionById(context.Context, *GetQuestionByIdRequest) (*GetQuestionByIdResponse, error)
	GetQuestionsByDocId(context.Context, *GetQuestionsByDocIdRequest) (*GetQuestionsByDocIdResponse, error)
	GetQuestionsByQuestionTitleSearch(context.Context, *GetQuestionsByQuestionTitleSearchRequest) (*GetQuestionsByQuestionTitleSearchResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionServiceServer struct{}

func (UnimplementedQuestionServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestionById(context.Context, *GetQuestionByIdRequest) (*GetQuestionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionById not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestionsByDocId(context.Context, *GetQuestionsByDocIdRequest) (*GetQuestionsByDocIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByDocId not implemented")
}
func (UnimplementedQuestionServiceServer) GetQuestionsByQuestionTitleSearch(context.Context, *GetQuestionsByQuestionTitleSearchRequest) (*GetQuestionsByQuestionTitleSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByQuestionTitleSearch not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}
func (UnimplementedQuestionServiceServer) testEmbeddedByValue()                         {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetQuestionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionById(ctx, req.(*GetQuestionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionsByDocId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByDocIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionsByDocId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetQuestionsByDocId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionsByDocId(ctx, req.(*GetQuestionsByDocIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_GetQuestionsByQuestionTitleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByQuestionTitleSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).GetQuestionsByQuestionTitleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_GetQuestionsByQuestionTitleSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).GetQuestionsByQuestionTitleSearch(ctx, req.(*GetQuestionsByQuestionTitleSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestionById",
			Handler:    _QuestionService_GetQuestionById_Handler,
		},
		{
			MethodName: "GetQuestionsByDocId",
			Handler:    _QuestionService_GetQuestionsByDocId_Handler,
		},
		{
			MethodName: "GetQuestionsByQuestionTitleSearch",
			Handler:    _QuestionService_GetQuestionsByQuestionTitleSearch_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionService_DeleteQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/memory.proto",
}
