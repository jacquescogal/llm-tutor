// module.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.1
// source: module.proto

package module

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "memory_core/internal/proto/common"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ModuleService
type CreateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleName        string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ModuleDescription string `protobuf:"bytes,3,opt,name=module_description,json=moduleDescription,proto3" json:"module_description,omitempty"`
	IsPublic          bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *CreateModuleRequest) Reset() {
	*x = CreateModuleRequest{}
	mi := &file_module_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleRequest) ProtoMessage() {}

func (x *CreateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleRequest.ProtoReflect.Descriptor instead.
func (*CreateModuleRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{0}
}

func (x *CreateModuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateModuleRequest) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *CreateModuleRequest) GetModuleDescription() string {
	if x != nil {
		return x.ModuleDescription
	}
	return ""
}

func (x *CreateModuleRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type CreateModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateModuleResponse) Reset() {
	*x = CreateModuleResponse{}
	mi := &file_module_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModuleResponse) ProtoMessage() {}

func (x *CreateModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModuleResponse.ProtoReflect.Descriptor instead.
func (*CreateModuleResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{1}
}

type GetPublicModulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetPublicModulesRequest) Reset() {
	*x = GetPublicModulesRequest{}
	mi := &file_module_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicModulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicModulesRequest) ProtoMessage() {}

func (x *GetPublicModulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicModulesRequest.ProtoReflect.Descriptor instead.
func (*GetPublicModulesRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{2}
}

func (x *GetPublicModulesRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPublicModulesRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPublicModulesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPublicModulesRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetPublicModulesRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetPublicModulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*FullModule `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetPublicModulesResponse) Reset() {
	*x = GetPublicModulesResponse{}
	mi := &file_module_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicModulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicModulesResponse) ProtoMessage() {}

func (x *GetPublicModulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicModulesResponse.ProtoReflect.Descriptor instead.
func (*GetPublicModulesResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{3}
}

func (x *GetPublicModulesResponse) GetModules() []*FullModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type GetPrivateModulesByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetPrivateModulesByUserIdRequest) Reset() {
	*x = GetPrivateModulesByUserIdRequest{}
	mi := &file_module_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateModulesByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateModulesByUserIdRequest) ProtoMessage() {}

func (x *GetPrivateModulesByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateModulesByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateModulesByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{4}
}

func (x *GetPrivateModulesByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetPrivateModulesByUserIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetPrivateModulesByUserIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPrivateModulesByUserIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetPrivateModulesByUserIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetPrivateModulesByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*FullModule `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetPrivateModulesByUserIdResponse) Reset() {
	*x = GetPrivateModulesByUserIdResponse{}
	mi := &file_module_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPrivateModulesByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateModulesByUserIdResponse) ProtoMessage() {}

func (x *GetPrivateModulesByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateModulesByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetPrivateModulesByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{5}
}

func (x *GetPrivateModulesByUserIdResponse) GetModules() []*FullModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type GetFavouriteModulesByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,4,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,5,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetFavouriteModulesByUserIdRequest) Reset() {
	*x = GetFavouriteModulesByUserIdRequest{}
	mi := &file_module_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavouriteModulesByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavouriteModulesByUserIdRequest) ProtoMessage() {}

func (x *GetFavouriteModulesByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavouriteModulesByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetFavouriteModulesByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{6}
}

func (x *GetFavouriteModulesByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFavouriteModulesByUserIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetFavouriteModulesByUserIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFavouriteModulesByUserIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetFavouriteModulesByUserIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetFavouriteModulesByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*FullModule `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetFavouriteModulesByUserIdResponse) Reset() {
	*x = GetFavouriteModulesByUserIdResponse{}
	mi := &file_module_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFavouriteModulesByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFavouriteModulesByUserIdResponse) ProtoMessage() {}

func (x *GetFavouriteModulesByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFavouriteModulesByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetFavouriteModulesByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{7}
}

func (x *GetFavouriteModulesByUserIdResponse) GetModules() []*FullModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type GetModuleByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId uint64 `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *GetModuleByIdRequest) Reset() {
	*x = GetModuleByIdRequest{}
	mi := &file_module_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModuleByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleByIdRequest) ProtoMessage() {}

func (x *GetModuleByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleByIdRequest.ProtoReflect.Descriptor instead.
func (*GetModuleByIdRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{8}
}

func (x *GetModuleByIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetModuleByIdRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type GetModuleByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module *FullModule `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *GetModuleByIdResponse) Reset() {
	*x = GetModuleByIdResponse{}
	mi := &file_module_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModuleByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModuleByIdResponse) ProtoMessage() {}

func (x *GetModuleByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModuleByIdResponse.ProtoReflect.Descriptor instead.
func (*GetModuleByIdResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{9}
}

func (x *GetModuleByIdResponse) GetModule() *FullModule {
	if x != nil {
		return x.Module
	}
	return nil
}

type GetModulesBySubjectIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SubjectId        uint64                    `protobuf:"varint,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,5,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,6,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetModulesBySubjectIdRequest) Reset() {
	*x = GetModulesBySubjectIdRequest{}
	mi := &file_module_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModulesBySubjectIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModulesBySubjectIdRequest) ProtoMessage() {}

func (x *GetModulesBySubjectIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModulesBySubjectIdRequest.ProtoReflect.Descriptor instead.
func (*GetModulesBySubjectIdRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{10}
}

func (x *GetModulesBySubjectIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetModulesBySubjectIdRequest) GetSubjectId() uint64 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *GetModulesBySubjectIdRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetModulesBySubjectIdRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetModulesBySubjectIdRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetModulesBySubjectIdRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetModulesBySubjectIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*FullModule `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetModulesBySubjectIdResponse) Reset() {
	*x = GetModulesBySubjectIdResponse{}
	mi := &file_module_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModulesBySubjectIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModulesBySubjectIdResponse) ProtoMessage() {}

func (x *GetModulesBySubjectIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModulesBySubjectIdResponse.ProtoReflect.Descriptor instead.
func (*GetModulesBySubjectIdResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{11}
}

func (x *GetModulesBySubjectIdResponse) GetModules() []*FullModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type GetModulesByNameSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           uint64                    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SearchQuery      string                    `protobuf:"bytes,2,opt,name=search_query,json=searchQuery,proto3" json:"search_query,omitempty"`
	PageNumber       uint32                    `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize         uint32                    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderByField     common.ORDER_BY_FIELD     `protobuf:"varint,5,opt,name=order_by_field,json=orderByField,proto3,enum=common.ORDER_BY_FIELD" json:"order_by_field,omitempty"`
	OrderByDirection common.ORDER_BY_DIRECTION `protobuf:"varint,6,opt,name=order_by_direction,json=orderByDirection,proto3,enum=common.ORDER_BY_DIRECTION" json:"order_by_direction,omitempty"`
}

func (x *GetModulesByNameSearchRequest) Reset() {
	*x = GetModulesByNameSearchRequest{}
	mi := &file_module_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModulesByNameSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModulesByNameSearchRequest) ProtoMessage() {}

func (x *GetModulesByNameSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModulesByNameSearchRequest.ProtoReflect.Descriptor instead.
func (*GetModulesByNameSearchRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{12}
}

func (x *GetModulesByNameSearchRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetModulesByNameSearchRequest) GetSearchQuery() string {
	if x != nil {
		return x.SearchQuery
	}
	return ""
}

func (x *GetModulesByNameSearchRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetModulesByNameSearchRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetModulesByNameSearchRequest) GetOrderByField() common.ORDER_BY_FIELD {
	if x != nil {
		return x.OrderByField
	}
	return common.ORDER_BY_FIELD(0)
}

func (x *GetModulesByNameSearchRequest) GetOrderByDirection() common.ORDER_BY_DIRECTION {
	if x != nil {
		return x.OrderByDirection
	}
	return common.ORDER_BY_DIRECTION(0)
}

type GetModulesByNameSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules []*FullModule `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *GetModulesByNameSearchResponse) Reset() {
	*x = GetModulesByNameSearchResponse{}
	mi := &file_module_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModulesByNameSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModulesByNameSearchResponse) ProtoMessage() {}

func (x *GetModulesByNameSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModulesByNameSearchResponse.ProtoReflect.Descriptor instead.
func (*GetModulesByNameSearchResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{13}
}

func (x *GetModulesByNameSearchResponse) GetModules() []*FullModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

type UpdateModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId          uint64 `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleName        string `protobuf:"bytes,3,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ModuleDescription string `protobuf:"bytes,4,opt,name=module_description,json=moduleDescription,proto3" json:"module_description,omitempty"`
	IsPublic          bool   `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *UpdateModuleRequest) Reset() {
	*x = UpdateModuleRequest{}
	mi := &file_module_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModuleRequest) ProtoMessage() {}

func (x *UpdateModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateModuleRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateModuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateModuleRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *UpdateModuleRequest) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *UpdateModuleRequest) GetModuleDescription() string {
	if x != nil {
		return x.ModuleDescription
	}
	return ""
}

func (x *UpdateModuleRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type UpdateModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateModuleResponse) Reset() {
	*x = UpdateModuleResponse{}
	mi := &file_module_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModuleResponse) ProtoMessage() {}

func (x *UpdateModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModuleResponse.ProtoReflect.Descriptor instead.
func (*UpdateModuleResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{15}
}

type DeleteModuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId uint64 `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
}

func (x *DeleteModuleRequest) Reset() {
	*x = DeleteModuleRequest{}
	mi := &file_module_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteModuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModuleRequest) ProtoMessage() {}

func (x *DeleteModuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModuleRequest.ProtoReflect.Descriptor instead.
func (*DeleteModuleRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteModuleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteModuleRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

type DeleteModuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteModuleResponse) Reset() {
	*x = DeleteModuleResponse{}
	mi := &file_module_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteModuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModuleResponse) ProtoMessage() {}

func (x *DeleteModuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModuleResponse.ProtoReflect.Descriptor instead.
func (*DeleteModuleResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{17}
}

type SetUserModuleFavouriteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId    uint64 `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	IsFavourite bool   `protobuf:"varint,3,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *SetUserModuleFavouriteRequest) Reset() {
	*x = SetUserModuleFavouriteRequest{}
	mi := &file_module_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserModuleFavouriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserModuleFavouriteRequest) ProtoMessage() {}

func (x *SetUserModuleFavouriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserModuleFavouriteRequest.ProtoReflect.Descriptor instead.
func (*SetUserModuleFavouriteRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{18}
}

func (x *SetUserModuleFavouriteRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserModuleFavouriteRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *SetUserModuleFavouriteRequest) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

type SetUserModuleFavouriteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserModuleFavouriteResponse) Reset() {
	*x = SetUserModuleFavouriteResponse{}
	mi := &file_module_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserModuleFavouriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserModuleFavouriteResponse) ProtoMessage() {}

func (x *SetUserModuleFavouriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserModuleFavouriteResponse.ProtoReflect.Descriptor instead.
func (*SetUserModuleFavouriteResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{19}
}

type SetUserModuleRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64                `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId       uint64                `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	UserModuleRole common.UserModuleRole `protobuf:"varint,3,opt,name=user_module_role,json=userModuleRole,proto3,enum=common.UserModuleRole" json:"user_module_role,omitempty"`
}

func (x *SetUserModuleRoleRequest) Reset() {
	*x = SetUserModuleRoleRequest{}
	mi := &file_module_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserModuleRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserModuleRoleRequest) ProtoMessage() {}

func (x *SetUserModuleRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserModuleRoleRequest.ProtoReflect.Descriptor instead.
func (*SetUserModuleRoleRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{20}
}

func (x *SetUserModuleRoleRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SetUserModuleRoleRequest) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *SetUserModuleRoleRequest) GetUserModuleRole() common.UserModuleRole {
	if x != nil {
		return x.UserModuleRole
	}
	return common.UserModuleRole(0)
}

type SetUserModuleRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUserModuleRoleResponse) Reset() {
	*x = SetUserModuleRoleResponse{}
	mi := &file_module_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetUserModuleRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUserModuleRoleResponse) ProtoMessage() {}

func (x *SetUserModuleRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUserModuleRoleResponse.ProtoReflect.Descriptor instead.
func (*SetUserModuleRoleResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{21}
}

// Consolidated Models
type FullModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module         *DBModule             `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	UserModuleRole common.UserModuleRole `protobuf:"varint,2,opt,name=user_module_role,json=userModuleRole,proto3,enum=common.UserModuleRole" json:"user_module_role,omitempty"`
	IsFavourite    bool                  `protobuf:"varint,3,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *FullModule) Reset() {
	*x = FullModule{}
	mi := &file_module_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullModule) ProtoMessage() {}

func (x *FullModule) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullModule.ProtoReflect.Descriptor instead.
func (*FullModule) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{22}
}

func (x *FullModule) GetModule() *DBModule {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *FullModule) GetUserModuleRole() common.UserModuleRole {
	if x != nil {
		return x.UserModuleRole
	}
	return common.UserModuleRole(0)
}

func (x *FullModule) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

type DBModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleId          uint64 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	ModuleName        string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	ModuleDescription string `protobuf:"bytes,3,opt,name=module_description,json=moduleDescription,proto3" json:"module_description,omitempty"`
	IsPublic          bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	CreatedTime       uint64 `protobuf:"varint,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime       uint64 `protobuf:"varint,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *DBModule) Reset() {
	*x = DBModule{}
	mi := &file_module_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBModule) ProtoMessage() {}

func (x *DBModule) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBModule.ProtoReflect.Descriptor instead.
func (*DBModule) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{23}
}

func (x *DBModule) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *DBModule) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *DBModule) GetModuleDescription() string {
	if x != nil {
		return x.ModuleDescription
	}
	return ""
}

func (x *DBModule) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *DBModule) GetCreatedTime() uint64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DBModule) GetUpdatedTime() uint64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type DBUserModuleMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         uint64                `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ModuleId       uint64                `protobuf:"varint,2,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	UserModuleRole common.UserModuleRole `protobuf:"varint,3,opt,name=user_module_role,json=userModuleRole,proto3,enum=common.UserModuleRole" json:"user_module_role,omitempty"`
	IsFavourite    bool                  `protobuf:"varint,4,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (x *DBUserModuleMap) Reset() {
	*x = DBUserModuleMap{}
	mi := &file_module_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DBUserModuleMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBUserModuleMap) ProtoMessage() {}

func (x *DBUserModuleMap) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBUserModuleMap.ProtoReflect.Descriptor instead.
func (*DBUserModuleMap) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{24}
}

func (x *DBUserModuleMap) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DBUserModuleMap) GetModuleId() uint64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *DBUserModuleMap) GetUserModuleRole() common.UserModuleRole {
	if x != nil {
		return x.UserModuleRole
	}
	return common.UserModuleRole(0)
}

func (x *DBUserModuleMap) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

var File_module_proto protoreflect.FileDescriptor

var file_module_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x81, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x51, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x23,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x43, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x52, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f,
	0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x0a, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x42, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61,
	0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x44,
	0x42, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x44, 0x42, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x61, 0x76,
	0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x32, 0x91, 0x08, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x23, 0x5a, 0x21, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_module_proto_rawDescOnce sync.Once
	file_module_proto_rawDescData = file_module_proto_rawDesc
)

func file_module_proto_rawDescGZIP() []byte {
	file_module_proto_rawDescOnce.Do(func() {
		file_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_module_proto_rawDescData)
	})
	return file_module_proto_rawDescData
}

var file_module_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_module_proto_goTypes = []any{
	(*CreateModuleRequest)(nil),                 // 0: module.CreateModuleRequest
	(*CreateModuleResponse)(nil),                // 1: module.CreateModuleResponse
	(*GetPublicModulesRequest)(nil),             // 2: module.GetPublicModulesRequest
	(*GetPublicModulesResponse)(nil),            // 3: module.GetPublicModulesResponse
	(*GetPrivateModulesByUserIdRequest)(nil),    // 4: module.GetPrivateModulesByUserIdRequest
	(*GetPrivateModulesByUserIdResponse)(nil),   // 5: module.GetPrivateModulesByUserIdResponse
	(*GetFavouriteModulesByUserIdRequest)(nil),  // 6: module.GetFavouriteModulesByUserIdRequest
	(*GetFavouriteModulesByUserIdResponse)(nil), // 7: module.GetFavouriteModulesByUserIdResponse
	(*GetModuleByIdRequest)(nil),                // 8: module.GetModuleByIdRequest
	(*GetModuleByIdResponse)(nil),               // 9: module.GetModuleByIdResponse
	(*GetModulesBySubjectIdRequest)(nil),        // 10: module.GetModulesBySubjectIdRequest
	(*GetModulesBySubjectIdResponse)(nil),       // 11: module.GetModulesBySubjectIdResponse
	(*GetModulesByNameSearchRequest)(nil),       // 12: module.GetModulesByNameSearchRequest
	(*GetModulesByNameSearchResponse)(nil),      // 13: module.GetModulesByNameSearchResponse
	(*UpdateModuleRequest)(nil),                 // 14: module.UpdateModuleRequest
	(*UpdateModuleResponse)(nil),                // 15: module.UpdateModuleResponse
	(*DeleteModuleRequest)(nil),                 // 16: module.DeleteModuleRequest
	(*DeleteModuleResponse)(nil),                // 17: module.DeleteModuleResponse
	(*SetUserModuleFavouriteRequest)(nil),       // 18: module.SetUserModuleFavouriteRequest
	(*SetUserModuleFavouriteResponse)(nil),      // 19: module.SetUserModuleFavouriteResponse
	(*SetUserModuleRoleRequest)(nil),            // 20: module.SetUserModuleRoleRequest
	(*SetUserModuleRoleResponse)(nil),           // 21: module.SetUserModuleRoleResponse
	(*FullModule)(nil),                          // 22: module.FullModule
	(*DBModule)(nil),                            // 23: module.DBModule
	(*DBUserModuleMap)(nil),                     // 24: module.DBUserModuleMap
	(common.ORDER_BY_FIELD)(0),                  // 25: common.ORDER_BY_FIELD
	(common.ORDER_BY_DIRECTION)(0),              // 26: common.ORDER_BY_DIRECTION
	(common.UserModuleRole)(0),                  // 27: common.UserModuleRole
}
var file_module_proto_depIdxs = []int32{
	25, // 0: module.GetPublicModulesRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	26, // 1: module.GetPublicModulesRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	22, // 2: module.GetPublicModulesResponse.modules:type_name -> module.FullModule
	25, // 3: module.GetPrivateModulesByUserIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	26, // 4: module.GetPrivateModulesByUserIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	22, // 5: module.GetPrivateModulesByUserIdResponse.modules:type_name -> module.FullModule
	25, // 6: module.GetFavouriteModulesByUserIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	26, // 7: module.GetFavouriteModulesByUserIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	22, // 8: module.GetFavouriteModulesByUserIdResponse.modules:type_name -> module.FullModule
	22, // 9: module.GetModuleByIdResponse.module:type_name -> module.FullModule
	25, // 10: module.GetModulesBySubjectIdRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	26, // 11: module.GetModulesBySubjectIdRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	22, // 12: module.GetModulesBySubjectIdResponse.modules:type_name -> module.FullModule
	25, // 13: module.GetModulesByNameSearchRequest.order_by_field:type_name -> common.ORDER_BY_FIELD
	26, // 14: module.GetModulesByNameSearchRequest.order_by_direction:type_name -> common.ORDER_BY_DIRECTION
	22, // 15: module.GetModulesByNameSearchResponse.modules:type_name -> module.FullModule
	27, // 16: module.SetUserModuleRoleRequest.user_module_role:type_name -> common.UserModuleRole
	23, // 17: module.FullModule.module:type_name -> module.DBModule
	27, // 18: module.FullModule.user_module_role:type_name -> common.UserModuleRole
	27, // 19: module.DBUserModuleMap.user_module_role:type_name -> common.UserModuleRole
	0,  // 20: module.ModuleService.CreateModule:input_type -> module.CreateModuleRequest
	2,  // 21: module.ModuleService.GetPublicModules:input_type -> module.GetPublicModulesRequest
	4,  // 22: module.ModuleService.GetPrivateModulesByUserId:input_type -> module.GetPrivateModulesByUserIdRequest
	6,  // 23: module.ModuleService.GetFavouriteModulesByUserId:input_type -> module.GetFavouriteModulesByUserIdRequest
	8,  // 24: module.ModuleService.GetModuleById:input_type -> module.GetModuleByIdRequest
	10, // 25: module.ModuleService.GetModulesBySubjectId:input_type -> module.GetModulesBySubjectIdRequest
	12, // 26: module.ModuleService.GetModulesByNameSearch:input_type -> module.GetModulesByNameSearchRequest
	14, // 27: module.ModuleService.UpdateModule:input_type -> module.UpdateModuleRequest
	16, // 28: module.ModuleService.DeleteModule:input_type -> module.DeleteModuleRequest
	18, // 29: module.ModuleService.SetUserModuleFavourite:input_type -> module.SetUserModuleFavouriteRequest
	20, // 30: module.ModuleService.SetUserModuleRole:input_type -> module.SetUserModuleRoleRequest
	1,  // 31: module.ModuleService.CreateModule:output_type -> module.CreateModuleResponse
	3,  // 32: module.ModuleService.GetPublicModules:output_type -> module.GetPublicModulesResponse
	5,  // 33: module.ModuleService.GetPrivateModulesByUserId:output_type -> module.GetPrivateModulesByUserIdResponse
	7,  // 34: module.ModuleService.GetFavouriteModulesByUserId:output_type -> module.GetFavouriteModulesByUserIdResponse
	9,  // 35: module.ModuleService.GetModuleById:output_type -> module.GetModuleByIdResponse
	11, // 36: module.ModuleService.GetModulesBySubjectId:output_type -> module.GetModulesBySubjectIdResponse
	13, // 37: module.ModuleService.GetModulesByNameSearch:output_type -> module.GetModulesByNameSearchResponse
	15, // 38: module.ModuleService.UpdateModule:output_type -> module.UpdateModuleResponse
	17, // 39: module.ModuleService.DeleteModule:output_type -> module.DeleteModuleResponse
	19, // 40: module.ModuleService.SetUserModuleFavourite:output_type -> module.SetUserModuleFavouriteResponse
	21, // 41: module.ModuleService.SetUserModuleRole:output_type -> module.SetUserModuleRoleResponse
	31, // [31:42] is the sub-list for method output_type
	20, // [20:31] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_module_proto_init() }
func file_module_proto_init() {
	if File_module_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_module_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_module_proto_goTypes,
		DependencyIndexes: file_module_proto_depIdxs,
		MessageInfos:      file_module_proto_msgTypes,
	}.Build()
	File_module_proto = out.File
	file_module_proto_rawDesc = nil
	file_module_proto_goTypes = nil
	file_module_proto_depIdxs = nil
}
