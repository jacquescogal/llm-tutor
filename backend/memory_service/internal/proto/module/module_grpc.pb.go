// module.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: module.proto

package module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModuleService_CreateModule_FullMethodName                = "/module.ModuleService/CreateModule"
	ModuleService_GetPublicModules_FullMethodName            = "/module.ModuleService/GetPublicModules"
	ModuleService_GetPrivateModulesByUserId_FullMethodName   = "/module.ModuleService/GetPrivateModulesByUserId"
	ModuleService_GetFavouriteModulesByUserId_FullMethodName = "/module.ModuleService/GetFavouriteModulesByUserId"
	ModuleService_GetModuleById_FullMethodName               = "/module.ModuleService/GetModuleById"
	ModuleService_GetModulesBySubjectId_FullMethodName       = "/module.ModuleService/GetModulesBySubjectId"
	ModuleService_GetModulesByNameSearch_FullMethodName      = "/module.ModuleService/GetModulesByNameSearch"
	ModuleService_UpdateModule_FullMethodName                = "/module.ModuleService/UpdateModule"
	ModuleService_DeleteModule_FullMethodName                = "/module.ModuleService/DeleteModule"
	ModuleService_SetUserModuleFavourite_FullMethodName      = "/module.ModuleService/SetUserModuleFavourite"
	ModuleService_SetUserModuleRole_FullMethodName           = "/module.ModuleService/SetUserModuleRole"
)

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	GetPublicModules(ctx context.Context, in *GetPublicModulesRequest, opts ...grpc.CallOption) (*GetPublicModulesResponse, error)
	GetPrivateModulesByUserId(ctx context.Context, in *GetPrivateModulesByUserIdRequest, opts ...grpc.CallOption) (*GetPrivateModulesByUserIdResponse, error)
	GetFavouriteModulesByUserId(ctx context.Context, in *GetFavouriteModulesByUserIdRequest, opts ...grpc.CallOption) (*GetFavouriteModulesByUserIdResponse, error)
	GetModuleById(ctx context.Context, in *GetModuleByIdRequest, opts ...grpc.CallOption) (*GetModuleByIdResponse, error)
	GetModulesBySubjectId(ctx context.Context, in *GetModulesBySubjectIdRequest, opts ...grpc.CallOption) (*GetModulesBySubjectIdResponse, error)
	GetModulesByNameSearch(ctx context.Context, in *GetModulesByNameSearchRequest, opts ...grpc.CallOption) (*GetModulesByNameSearchResponse, error)
	UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error)
	DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error)
	SetUserModuleFavourite(ctx context.Context, in *SetUserModuleFavouriteRequest, opts ...grpc.CallOption) (*SetUserModuleFavouriteResponse, error)
	SetUserModuleRole(ctx context.Context, in *SetUserModuleRoleRequest, opts ...grpc.CallOption) (*SetUserModuleRoleResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_CreateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetPublicModules(ctx context.Context, in *GetPublicModulesRequest, opts ...grpc.CallOption) (*GetPublicModulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicModulesResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetPublicModules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetPrivateModulesByUserId(ctx context.Context, in *GetPrivateModulesByUserIdRequest, opts ...grpc.CallOption) (*GetPrivateModulesByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateModulesByUserIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetPrivateModulesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetFavouriteModulesByUserId(ctx context.Context, in *GetFavouriteModulesByUserIdRequest, opts ...grpc.CallOption) (*GetFavouriteModulesByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFavouriteModulesByUserIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetFavouriteModulesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleById(ctx context.Context, in *GetModuleByIdRequest, opts ...grpc.CallOption) (*GetModuleByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModuleByIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModuleById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModulesBySubjectId(ctx context.Context, in *GetModulesBySubjectIdRequest, opts ...grpc.CallOption) (*GetModulesBySubjectIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModulesBySubjectIdResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModulesBySubjectId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModulesByNameSearch(ctx context.Context, in *GetModulesByNameSearchRequest, opts ...grpc.CallOption) (*GetModulesByNameSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModulesByNameSearchResponse)
	err := c.cc.Invoke(ctx, ModuleService_GetModulesByNameSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) UpdateModule(ctx context.Context, in *UpdateModuleRequest, opts ...grpc.CallOption) (*UpdateModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_UpdateModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) DeleteModule(ctx context.Context, in *DeleteModuleRequest, opts ...grpc.CallOption) (*DeleteModuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteModuleResponse)
	err := c.cc.Invoke(ctx, ModuleService_DeleteModule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SetUserModuleFavourite(ctx context.Context, in *SetUserModuleFavouriteRequest, opts ...grpc.CallOption) (*SetUserModuleFavouriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserModuleFavouriteResponse)
	err := c.cc.Invoke(ctx, ModuleService_SetUserModuleFavourite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SetUserModuleRole(ctx context.Context, in *SetUserModuleRoleRequest, opts ...grpc.CallOption) (*SetUserModuleRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserModuleRoleResponse)
	err := c.cc.Invoke(ctx, ModuleService_SetUserModuleRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility.
type ModuleServiceServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	GetPublicModules(context.Context, *GetPublicModulesRequest) (*GetPublicModulesResponse, error)
	GetPrivateModulesByUserId(context.Context, *GetPrivateModulesByUserIdRequest) (*GetPrivateModulesByUserIdResponse, error)
	GetFavouriteModulesByUserId(context.Context, *GetFavouriteModulesByUserIdRequest) (*GetFavouriteModulesByUserIdResponse, error)
	GetModuleById(context.Context, *GetModuleByIdRequest) (*GetModuleByIdResponse, error)
	GetModulesBySubjectId(context.Context, *GetModulesBySubjectIdRequest) (*GetModulesBySubjectIdResponse, error)
	GetModulesByNameSearch(context.Context, *GetModulesByNameSearchRequest) (*GetModulesByNameSearchResponse, error)
	UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error)
	DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error)
	SetUserModuleFavourite(context.Context, *SetUserModuleFavouriteRequest) (*SetUserModuleFavouriteResponse, error)
	SetUserModuleRole(context.Context, *SetUserModuleRoleRequest) (*SetUserModuleRoleResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModuleServiceServer struct{}

func (UnimplementedModuleServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServiceServer) GetPublicModules(context.Context, *GetPublicModulesRequest) (*GetPublicModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicModules not implemented")
}
func (UnimplementedModuleServiceServer) GetPrivateModulesByUserId(context.Context, *GetPrivateModulesByUserIdRequest) (*GetPrivateModulesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateModulesByUserId not implemented")
}
func (UnimplementedModuleServiceServer) GetFavouriteModulesByUserId(context.Context, *GetFavouriteModulesByUserIdRequest) (*GetFavouriteModulesByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavouriteModulesByUserId not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleById(context.Context, *GetModuleByIdRequest) (*GetModuleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleById not implemented")
}
func (UnimplementedModuleServiceServer) GetModulesBySubjectId(context.Context, *GetModulesBySubjectIdRequest) (*GetModulesBySubjectIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesBySubjectId not implemented")
}
func (UnimplementedModuleServiceServer) GetModulesByNameSearch(context.Context, *GetModulesByNameSearchRequest) (*GetModulesByNameSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModulesByNameSearch not implemented")
}
func (UnimplementedModuleServiceServer) UpdateModule(context.Context, *UpdateModuleRequest) (*UpdateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModule not implemented")
}
func (UnimplementedModuleServiceServer) DeleteModule(context.Context, *DeleteModuleRequest) (*DeleteModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModule not implemented")
}
func (UnimplementedModuleServiceServer) SetUserModuleFavourite(context.Context, *SetUserModuleFavouriteRequest) (*SetUserModuleFavouriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserModuleFavourite not implemented")
}
func (UnimplementedModuleServiceServer) SetUserModuleRole(context.Context, *SetUserModuleRoleRequest) (*SetUserModuleRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserModuleRole not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}
func (UnimplementedModuleServiceServer) testEmbeddedByValue()                       {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	// If the following call pancis, it indicates UnimplementedModuleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_CreateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetPublicModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetPublicModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetPublicModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetPublicModules(ctx, req.(*GetPublicModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetPrivateModulesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateModulesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetPrivateModulesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetPrivateModulesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetPrivateModulesByUserId(ctx, req.(*GetPrivateModulesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetFavouriteModulesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavouriteModulesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetFavouriteModulesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetFavouriteModulesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetFavouriteModulesByUserId(ctx, req.(*GetFavouriteModulesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModuleById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleById(ctx, req.(*GetModuleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModulesBySubjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModulesBySubjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModulesBySubjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModulesBySubjectId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModulesBySubjectId(ctx, req.(*GetModulesBySubjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModulesByNameSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModulesByNameSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModulesByNameSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_GetModulesByNameSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModulesByNameSearch(ctx, req.(*GetModulesByNameSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_UpdateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).UpdateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_UpdateModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).UpdateModule(ctx, req.(*UpdateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_DeleteModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).DeleteModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_DeleteModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).DeleteModule(ctx, req.(*DeleteModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SetUserModuleFavourite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserModuleFavouriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SetUserModuleFavourite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_SetUserModuleFavourite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SetUserModuleFavourite(ctx, req.(*SetUserModuleFavouriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SetUserModuleRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserModuleRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SetUserModuleRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleService_SetUserModuleRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SetUserModuleRole(ctx, req.(*SetUserModuleRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _ModuleService_CreateModule_Handler,
		},
		{
			MethodName: "GetPublicModules",
			Handler:    _ModuleService_GetPublicModules_Handler,
		},
		{
			MethodName: "GetPrivateModulesByUserId",
			Handler:    _ModuleService_GetPrivateModulesByUserId_Handler,
		},
		{
			MethodName: "GetFavouriteModulesByUserId",
			Handler:    _ModuleService_GetFavouriteModulesByUserId_Handler,
		},
		{
			MethodName: "GetModuleById",
			Handler:    _ModuleService_GetModuleById_Handler,
		},
		{
			MethodName: "GetModulesBySubjectId",
			Handler:    _ModuleService_GetModulesBySubjectId_Handler,
		},
		{
			MethodName: "GetModulesByNameSearch",
			Handler:    _ModuleService_GetModulesByNameSearch_Handler,
		},
		{
			MethodName: "UpdateModule",
			Handler:    _ModuleService_UpdateModule_Handler,
		},
		{
			MethodName: "DeleteModule",
			Handler:    _ModuleService_DeleteModule_Handler,
		},
		{
			MethodName: "SetUserModuleFavourite",
			Handler:    _ModuleService_SetUserModuleFavourite_Handler,
		},
		{
			MethodName: "SetUserModuleRole",
			Handler:    _ModuleService_SetUserModuleRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module.proto",
}
